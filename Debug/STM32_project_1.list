
STM32_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005020  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005210  08005210  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005218  08005218  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  0800522c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800522c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120bd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  000320f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00034758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  000356f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027cc  00000000  00000000  00036570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014266  00000000  00000000  00038d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0b56  00000000  00000000  0004cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013daf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd8  00000000  00000000  0013db48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005190 	.word	0x08005190

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005190 	.word	0x08005190

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <TM1637_init>:
void TM1637_cmd(const uint8_t data);
void TM1637_write_display(const char sign_arr[]);


void TM1637_init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	TM1637_write_display("@@@@");	//	Show some data on display,
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <TM1637_init+0x28>)
 80004d2:	f000 f8ae 	bl	8000632 <TM1637_write_display>
	HAL_Delay(500);
 80004d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004da:	f000 fe2b 	bl	8001134 <HAL_Delay>
	TM1637_cmd(NORMAL_AUTO_WRITE);	//	Selected working mode,
 80004de:	2040      	movs	r0, #64	; 0x40
 80004e0:	f000 f896 	bl	8000610 <TM1637_cmd>
	TM1637_cmd(DISP_ON_8);			//	Selected display brightness,
 80004e4:	208f      	movs	r0, #143	; 0x8f
 80004e6:	f000 f893 	bl	8000610 <TM1637_cmd>
	TM1637_write_display("????");	//	Show some data on display,
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <TM1637_init+0x2c>)
 80004ec:	f000 f8a1 	bl	8000632 <TM1637_write_display>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	080051a8 	.word	0x080051a8
 80004f8:	080051b0 	.word	0x080051b0

080004fc <TM1637_START>:

void TM1637_START(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	//	-sending start command,
	//	-we assume that state on two lines CLK and DIO is known, and it's a high state,

	//	Data line is going from high to low, CLK is on high state,
	HAL_GPIO_WritePin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <TM1637_START+0x2c>)
 8000508:	f001 faec 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800050c:	200a      	movs	r0, #10
 800050e:	f000 fe11 	bl	8001134 <HAL_Delay>

	//	CLK line is going from high to low, DIO is on low state,
	HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <TM1637_START+0x2c>)
 800051a:	f001 fae3 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f000 fe08 	bl	8001134 <HAL_Delay>
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	48000400 	.word	0x48000400

0800052c <TM1637_STOP>:

void TM1637_STOP(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	//	-sending stop command,
	//	-we assume that state on CLK line is low and we don't know how is the state on DIO,

	//	Setting low state on DIO pin,
	HAL_GPIO_WritePin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <TM1637_STOP+0x40>)
 8000538:	f001 fad4 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800053c:	200a      	movs	r0, #10
 800053e:	f000 fdf9 	bl	8001134 <HAL_Delay>

	//	CLK line is going from low to high, DIO is on low state,
	HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000548:	4808      	ldr	r0, [pc, #32]	; (800056c <TM1637_STOP+0x40>)
 800054a:	f001 facb 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800054e:	200a      	movs	r0, #10
 8000550:	f000 fdf0 	bl	8001134 <HAL_Delay>

	//	Data line is going from low to high, CLK is on high state,
	HAL_GPIO_WritePin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <TM1637_STOP+0x40>)
 800055c:	f001 fac2 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fde7 	bl	8001134 <HAL_Delay>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	48000400 	.word	0x48000400

08000570 <TM1637_write_data>:

void TM1637_write_data(const uint8_t data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	//	-sending one data frame,
	//	-after that we can send another data or stop command,
	//	-at the output we have: CLK - L, DIO - unknown,

	//	Sending eight bits of data:
	for(uint8_t i=0; i<8; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e02c      	b.n	80005da <TM1637_write_data+0x6a>
	{
		if( (data >> i) & 0x01)
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	fa42 f303 	asr.w	r3, r2, r3
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <TM1637_write_data+0x2e>
		{
			HAL_GPIO_WritePin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <TM1637_write_data+0x9c>)
 8000598:	f001 faa4 	bl	8001ae4 <HAL_GPIO_WritePin>
 800059c:	e005      	b.n	80005aa <TM1637_write_data+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(TM1637_DIO_GPIO_Port, TM1637_DIO_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	4819      	ldr	r0, [pc, #100]	; (800060c <TM1637_write_data+0x9c>)
 80005a6:	f001 fa9d 	bl	8001ae4 <HAL_GPIO_WritePin>
		}
		HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 fdc2 	bl	8001134 <HAL_Delay>

		HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4815      	ldr	r0, [pc, #84]	; (800060c <TM1637_write_data+0x9c>)
 80005b8:	f001 fa94 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fdb9 	bl	8001134 <HAL_Delay>

		HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4810      	ldr	r0, [pc, #64]	; (800060c <TM1637_write_data+0x9c>)
 80005ca:	f001 fa8b 	bl	8001ae4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fdb0 	bl	8001134 <HAL_Delay>
	for(uint8_t i=0; i<8; i++)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	d9cf      	bls.n	8000580 <TM1637_write_data+0x10>
	}

	//	Receive acknowledge bit or skip that:
	//	Now we make a skip:
	HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <TM1637_write_data+0x9c>)
 80005e8:	f001 fa7c 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fda1 	bl	8001134 <HAL_Delay>

	HAL_GPIO_WritePin(TM1637_CLK_GPIO_Port, TM1637_CLK_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <TM1637_write_data+0x9c>)
 80005fa:	f001 fa73 	bl	8001ae4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005fe:	200a      	movs	r0, #10
 8000600:	f000 fd98 	bl	8001134 <HAL_Delay>
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	48000400 	.word	0x48000400

08000610 <TM1637_cmd>:

void TM1637_cmd(const uint8_t data)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	TM1637_START();
 800061a:	f7ff ff6f 	bl	80004fc <TM1637_START>
	TM1637_write_data(data);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffa5 	bl	8000570 <TM1637_write_data>
	TM1637_STOP();
 8000626:	f7ff ff81 	bl	800052c <TM1637_STOP>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <TM1637_write_display>:

void TM1637_write_display(const char sign_arr[])
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	//	-sending data to show on display,

	TM1637_START();
 800063a:	f7ff ff5f 	bl	80004fc <TM1637_START>

	TM1637_write_data(DISP_ADDR_1);
 800063e:	20c0      	movs	r0, #192	; 0xc0
 8000640:	f7ff ff96 	bl	8000570 <TM1637_write_data>
	for(uint8_t i=0; i<NUMBER_OF_DISPLAYS; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	e009      	b.n	800065e <TM1637_write_display+0x2c>
	{
		TM1637_write_data(sign_arr[i]);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff8c 	bl	8000570 <TM1637_write_data>
	for(uint8_t i=0; i<NUMBER_OF_DISPLAYS; i++)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	3301      	adds	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d9f2      	bls.n	800064a <TM1637_write_display+0x18>
	}

	TM1637_STOP();
 8000664:	f7ff ff62 	bl	800052c <TM1637_STOP>
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_DMA_Init+0x38>)
 8000678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800067a:	4a0b      	ldr	r2, [pc, #44]	; (80006a8 <MX_DMA_Init+0x38>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6493      	str	r3, [r2, #72]	; 0x48
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_DMA_Init+0x38>)
 8000684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200c      	movs	r0, #12
 8000694:	f000 fe4d 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000698:	200c      	movs	r0, #12
 800069a:	f000 fe66 	bl	800136a <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006da:	4b33      	ldr	r3, [pc, #204]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a32      	ldr	r2, [pc, #200]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2c      	ldr	r2, [pc, #176]	; (80007a8 <MX_GPIO_Init+0xfc>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xfc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xfc>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xfc>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xfc>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LD2_Pin|LED_5_Pin
 8000722:	2200      	movs	r2, #0
 8000724:	21e3      	movs	r1, #227	; 0xe3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f001 f9db 	bl	8001ae4 <HAL_GPIO_WritePin>
                          |LED_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_7_Pin|LED_8_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f640 4103 	movw	r1, #3075	; 0xc03
 8000734:	481d      	ldr	r0, [pc, #116]	; (80007ac <MX_GPIO_Init+0x100>)
 8000736:	f001 f9d5 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TM1637_DIO_Pin|TM1637_CLK_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000740:	481a      	ldr	r0, [pc, #104]	; (80007ac <MX_GPIO_Init+0x100>)
 8000742:	f001 f9cf 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_GPIO_Init+0x104>)
 800075e:	f001 f817 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LD2_Pin|LED_5_Pin
 8000762:	23e3      	movs	r3, #227	; 0xe3
 8000764:	617b      	str	r3, [r7, #20]
                          |LED_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 f808 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED_7_Pin|LED_8_Pin|LED_3_Pin|LED_4_Pin
 8000780:	f640 7303 	movw	r3, #3843	; 0xf03
 8000784:	617b      	str	r3, [r7, #20]
                          |TM1637_DIO_Pin|TM1637_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x100>)
 800079a:	f000 fff9 	bl	8001790 <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000800 	.word	0x48000800

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint16_t LED_state[8] = {50, 1000, 500, 250, 500, 10, 500, 20};
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <main+0xcc>)
 80007bc:	f107 0418 	add.w	r4, r7, #24
 80007c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t DMA_data[10] = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

	DMA_data[0] = 3000;
 80007d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007d8:	80bb      	strh	r3, [r7, #4]
	DMA_data[1] = 7000;
 80007da:	f641 3358 	movw	r3, #7000	; 0x1b58
 80007de:	80fb      	strh	r3, [r7, #6]
	DMA_data[2] = 3000;
 80007e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80007e4:	813b      	strh	r3, [r7, #8]
	DMA_data[3] = 4000;
 80007e6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80007ea:	817b      	strh	r3, [r7, #10]
	DMA_data[4] = 5000;
 80007ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80007f0:	81bb      	strh	r3, [r7, #12]
	DMA_data[5] = 6000;
 80007f2:	f241 7370 	movw	r3, #6000	; 0x1770
 80007f6:	81fb      	strh	r3, [r7, #14]
	DMA_data[6] = 7000;
 80007f8:	f641 3358 	movw	r3, #7000	; 0x1b58
 80007fc:	823b      	strh	r3, [r7, #16]
	DMA_data[7] = 8000;
 80007fe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000802:	827b      	strh	r3, [r7, #18]
	DMA_data[8] = 9000;
 8000804:	f242 3328 	movw	r3, #9000	; 0x2328
 8000808:	82bb      	strh	r3, [r7, #20]
	DMA_data[9] = 5000;
 800080a:	f241 3388 	movw	r3, #5000	; 0x1388
 800080e:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fc14 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f83e 	bl	8000894 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ff48 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f7ff ff28 	bl	8000670 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000820:	f000 fb56 	bl	8000ed0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000824:	f000 fa74 	bl	8000d10 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000828:	f000 f9e2 	bl	8000bf0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <main+0xd0>)
 800082e:	f002 fce9 	bl	8003204 <HAL_TIM_Base_Start_IT>

  TM1637_init();
 8000832:	f7ff fe4b 	bl	80004cc <TM1637_init>
  //TIM1->CCR1 = 3000;							//	Capture Compare Register,
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		//	Without making interrupt,


  //	CONFIGURATION TIMER1 TO PWM TO WORK WITH DMA:
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *) DMA_data, 10);
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	230a      	movs	r3, #10
 800083a:	2100      	movs	r1, #0
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0xd4>)
 800083e:	f002 fda9 	bl	8003394 <HAL_TIM_PWM_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint8_t flag_LED = 0;

	  if(timer_1 == 0 && flag_LED == 0)
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <main+0xd8>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d10a      	bne.n	8000860 <main+0xac>
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <main+0xdc>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d106      	bne.n	8000860 <main+0xac>
	  {
		  timer_1 = 500;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <main+0xd8>)
 8000854:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000858:	801a      	strh	r2, [r3, #0]
		  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		  flag_LED = 1;
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <main+0xdc>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
	  }

	  if(timer_1 == 0 && flag_LED == 1)
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <main+0xd8>)
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1ec      	bne.n	8000842 <main+0x8e>
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <main+0xdc>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d1e8      	bne.n	8000842 <main+0x8e>
	  {
		  timer_1 = 200;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <main+0xd8>)
 8000872:	22c8      	movs	r2, #200	; 0xc8
 8000874:	801a      	strh	r2, [r3, #0]
		  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
		  flag_LED = 0;
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <main+0xdc>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
  {
 800087c:	e7e1      	b.n	8000842 <main+0x8e>
 800087e:	bf00      	nop
 8000880:	080051b8 	.word	0x080051b8
 8000884:	200000a0 	.word	0x200000a0
 8000888:	20000054 	.word	0x20000054
 800088c:	2000002a 	.word	0x2000002a
 8000890:	20000028 	.word	0x20000028

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2244      	movs	r2, #68	; 0x44
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fc6c 	bl	8005180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f001 f939 	bl	8001b30 <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c4:	f000 f842 	bl	800094c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2310      	movs	r3, #16
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008da:	2302      	movs	r3, #2
 80008dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008e2:	230a      	movs	r3, #10
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 f970 	bl	8001bdc <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000902:	f000 f823 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2303      	movs	r3, #3
 800090c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	2104      	movs	r1, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fd38 	bl	8002394 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 f80f 	bl	800094c <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3758      	adds	r7, #88	; 0x58
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]


	software_timers(htim);	//	Software timers,
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f80a 	bl	8000958 <software_timers>

}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <software_timers>:
volatile uint16_t timer_LED_8 = 0;

volatile uint16_t timer_LED[8] = {0};

void software_timers(TIM_HandleTypeDef *htim)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	static uint16_t counter = 0;

	if(htim->Instance == TIM7)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a5a      	ldr	r2, [pc, #360]	; (8000ad0 <software_timers+0x178>)
 8000966:	4293      	cmp	r3, r2
 8000968:	f040 80ab 	bne.w	8000ac2 <software_timers+0x16a>
	{
		counter++;
 800096c:	4b59      	ldr	r3, [pc, #356]	; (8000ad4 <software_timers+0x17c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b57      	ldr	r3, [pc, #348]	; (8000ad4 <software_timers+0x17c>)
 8000976:	801a      	strh	r2, [r3, #0]
		if(counter == 100)
 8000978:	4b56      	ldr	r3, [pc, #344]	; (8000ad4 <software_timers+0x17c>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	2b64      	cmp	r3, #100	; 0x64
 800097e:	d102      	bne.n	8000986 <software_timers+0x2e>
		{
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			counter = 0;
 8000980:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <software_timers+0x17c>)
 8000982:	2200      	movs	r2, #0
 8000984:	801a      	strh	r2, [r3, #0]
		}

		if(timer_1)		timer_1--;
 8000986:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <software_timers+0x180>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	b29b      	uxth	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <software_timers+0x46>
 8000990:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <software_timers+0x180>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	3b01      	subs	r3, #1
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <software_timers+0x180>)
 800099c:	801a      	strh	r2, [r3, #0]
		if(timer_2)		timer_2--;
 800099e:	4b4f      	ldr	r3, [pc, #316]	; (8000adc <software_timers+0x184>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <software_timers+0x5e>
 80009a8:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <software_timers+0x184>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b4a      	ldr	r3, [pc, #296]	; (8000adc <software_timers+0x184>)
 80009b4:	801a      	strh	r2, [r3, #0]
		if(timer_3)		timer_3--;
 80009b6:	4b4a      	ldr	r3, [pc, #296]	; (8000ae0 <software_timers+0x188>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d006      	beq.n	80009ce <software_timers+0x76>
 80009c0:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <software_timers+0x188>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <software_timers+0x188>)
 80009cc:	801a      	strh	r2, [r3, #0]

		if(timer_LED_1)		timer_LED_1--;
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <software_timers+0x18c>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d006      	beq.n	80009e6 <software_timers+0x8e>
 80009d8:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <software_timers+0x18c>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <software_timers+0x18c>)
 80009e4:	801a      	strh	r2, [r3, #0]
		if(timer_LED_2)		timer_LED_2--;
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <software_timers+0x190>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <software_timers+0xa6>
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <software_timers+0x190>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3b01      	subs	r3, #1
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <software_timers+0x190>)
 80009fc:	801a      	strh	r2, [r3, #0]
		if(timer_LED_3)		timer_LED_3--;
 80009fe:	4b3b      	ldr	r3, [pc, #236]	; (8000aec <software_timers+0x194>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <software_timers+0xbe>
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <software_timers+0x194>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <software_timers+0x194>)
 8000a14:	801a      	strh	r2, [r3, #0]
		if(timer_LED_4)		timer_LED_4--;
 8000a16:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <software_timers+0x198>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d006      	beq.n	8000a2e <software_timers+0xd6>
 8000a20:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <software_timers+0x198>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3b01      	subs	r3, #1
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <software_timers+0x198>)
 8000a2c:	801a      	strh	r2, [r3, #0]
		if(timer_LED_5)		timer_LED_5--;
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <software_timers+0x19c>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <software_timers+0xee>
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <software_timers+0x19c>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <software_timers+0x19c>)
 8000a44:	801a      	strh	r2, [r3, #0]
		if(timer_LED_6)		timer_LED_6--;
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <software_timers+0x1a0>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <software_timers+0x106>
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <software_timers+0x1a0>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	3b01      	subs	r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <software_timers+0x1a0>)
 8000a5c:	801a      	strh	r2, [r3, #0]
		if(timer_LED_7)		timer_LED_7--;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <software_timers+0x1a4>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <software_timers+0x11e>
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <software_timers+0x1a4>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <software_timers+0x1a4>)
 8000a74:	801a      	strh	r2, [r3, #0]
		if(timer_LED_8)		timer_LED_8--;
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <software_timers+0x1a8>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <software_timers+0x136>
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <software_timers+0x1a8>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3b01      	subs	r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <software_timers+0x1a8>)
 8000a8c:	801a      	strh	r2, [r3, #0]

		for(uint8_t i=0; i<8; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e013      	b.n	8000abc <software_timers+0x164>
		{
			if(timer_LED[i])		timer_LED[i]--;
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <software_timers+0x1ac>)
 8000a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d009      	beq.n	8000ab6 <software_timers+0x15e>
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <software_timers+0x1ac>)
 8000aa6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aaa:	b292      	uxth	r2, r2
 8000aac:	3a01      	subs	r2, #1
 8000aae:	b291      	uxth	r1, r2
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <software_timers+0x1ac>)
 8000ab2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=0; i<8; i++)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d9e8      	bls.n	8000a94 <software_timers+0x13c>
		}

	}

}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40001400 	.word	0x40001400
 8000ad4:	20000050 	.word	0x20000050
 8000ad8:	2000002a 	.word	0x2000002a
 8000adc:	2000002c 	.word	0x2000002c
 8000ae0:	2000002e 	.word	0x2000002e
 8000ae4:	20000030 	.word	0x20000030
 8000ae8:	20000032 	.word	0x20000032
 8000aec:	20000034 	.word	0x20000034
 8000af0:	20000036 	.word	0x20000036
 8000af4:	20000038 	.word	0x20000038
 8000af8:	2000003a 	.word	0x2000003a
 8000afc:	2000003c 	.word	0x2000003c
 8000b00:	2000003e 	.word	0x2000003e
 8000b04:	20000040 	.word	0x20000040

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 faaa 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <DMA1_Channel2_IRQHandler+0x10>)
 8000baa:	f000 fd11 	bl	80015d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000ec 	.word	0x200000ec

08000bb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM7_IRQHandler+0x10>)
 8000bbe:	f002 fe09 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000a0 	.word	0x200000a0

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	615a      	str	r2, [r3, #20]
 8000c14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	222c      	movs	r2, #44	; 0x2c
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 faaf 	bl	8005180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c24:	4a39      	ldr	r2, [pc, #228]	; (8000d0c <MX_TIM1_Init+0x11c>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c2a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000c36:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c38:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c50:	482d      	ldr	r0, [pc, #180]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c52:	f002 fb47 	bl	80032e4 <HAL_TIM_PWM_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000c5c:	f7ff fe76 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c60:	2300      	movs	r3, #0
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c70:	4619      	mov	r1, r3
 8000c72:	4825      	ldr	r0, [pc, #148]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000c74:	f003 fc86 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000c7e:	f7ff fe65 	bl	800094c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4818      	ldr	r0, [pc, #96]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000ca8:	f002 feb4 	bl	8003a14 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000cb2:	f7ff fe4b 	bl	800094c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000cec:	f003 fcd2 	bl	8004694 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000cf6:	f7ff fe29 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <MX_TIM1_Init+0x118>)
 8000cfc:	f000 f8b0 	bl	8000e60 <HAL_TIM_MspPostInit>

}
 8000d00:	bf00      	nop
 8000d02:	3758      	adds	r7, #88	; 0x58
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000054 	.word	0x20000054
 8000d0c:	40012c00 	.word	0x40012c00

08000d10 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <MX_TIM7_Init+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d28:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d36:	2209      	movs	r2, #9
 8000d38:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d42:	f002 fa07 	bl	8003154 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d4c:	f7ff fdfe 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_TIM7_Init+0x64>)
 8000d5e:	f003 fc11 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f7ff fdf0 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000a0 	.word	0x200000a0
 8000d78:	40001400 	.word	0x40001400

08000d7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1e      	ldr	r2, [pc, #120]	; (8000e04 <HAL_TIM_PWM_MspInit+0x88>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d136      	bne.n	8000dfc <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_TIM_PWM_MspInit+0x8c>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_TIM_PWM_MspInit+0x94>)
 8000daa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dae:	2207      	movs	r2, #7
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000db4:	2210      	movs	r2, #16
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dca:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000de2:	f000 fadd 	bl	80013a0 <HAL_DMA_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8000dec:	f7ff fdae 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_TIM_PWM_MspInit+0x90>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40012c00 	.word	0x40012c00
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	200000ec 	.word	0x200000ec
 8000e10:	4002001c 	.word	0x4002001c

08000e14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_TIM_Base_MspInit+0x48>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <HAL_TIM_Base_MspInit+0x48>)
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_Base_MspInit+0x48>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 0320 	and.w	r3, r3, #32
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2037      	movs	r0, #55	; 0x37
 8000e44:	f000 fa75 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e48:	2037      	movs	r0, #55	; 0x37
 8000e4a:	f000 fa8e 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40001400 	.word	0x40001400
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <HAL_TIM_MspPostInit+0x68>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11d      	bne.n	8000ebe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_TIM_MspPostInit+0x6c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f000 fc69 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_USART2_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f14:	f003 fc5a 	bl	80047cc <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f7ff fd15 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000134 	.word	0x20000134
 8000f2c:	40004400 	.word	0x40004400

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ac      	sub	sp, #176	; 0xb0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2288      	movs	r2, #136	; 0x88
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 f915 	bl	8005180 <memset>
  if(uartHandle->Instance==USART2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_UART_MspInit+0xb0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13b      	bne.n	8000fd8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f60:	2302      	movs	r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 fc35 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f78:	f7ff fce8 	bl	800094c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f86:	6593      	str	r3, [r2, #88]	; 0x58
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fac:	230c      	movs	r3, #12
 8000fae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f000 fbdc 	bl	8001790 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	37b0      	adds	r7, #176	; 0xb0
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fec:	f7ff fdee 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff8:	e002      	b.n	8001000 <LoopCopyDataInit>

08000ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffe:	3304      	adds	r3, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001004:	d3f9      	bcc.n	8000ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001008:	4c0a      	ldr	r4, [pc, #40]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800100c:	e001      	b.n	8001012 <LoopFillZerobss>

0800100e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001010:	3204      	adds	r2, #4

08001012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001014:	d3fb      	bcc.n	800100e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001016:	f004 f88f 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101a:	f7ff fbcb 	bl	80007b4 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001020:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800102c:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001034:	200001bc 	.word	0x200001bc

08001038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_2_IRQHandler>
	...

0800103c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_Init+0x3c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_Init+0x3c>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f962 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001058:	2000      	movs	r0, #0
 800105a:	f000 f80f 	bl	800107c <HAL_InitTick>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e001      	b.n	800106e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800106a:	f7ff fd4d 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106e:	79fb      	ldrb	r3, [r7, #7]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_InitTick+0x6c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d023      	beq.n	80010d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x70>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_InitTick+0x6c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f96d 	bl	8001386 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d809      	bhi.n	80010cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f937 	bl	8001332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_InitTick+0x74>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e007      	b.n	80010dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e004      	b.n	80010dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e001      	b.n	80010dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200001b8 	.word	0x200001b8

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001b8 	.word	0x200001b8

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e098      	b.n	80014e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <HAL_DMA_Init+0x150>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d80f      	bhi.n	80013de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <HAL_DMA_Init+0x154>)
 80013c6:	4413      	add	r3, r2
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_DMA_Init+0x158>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	009a      	lsls	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a48      	ldr	r2, [pc, #288]	; (80014fc <HAL_DMA_Init+0x15c>)
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <HAL_DMA_Init+0x160>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <HAL_DMA_Init+0x158>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a42      	ldr	r2, [pc, #264]	; (8001504 <HAL_DMA_Init+0x164>)
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001456:	d039      	beq.n	80014cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	4a27      	ldr	r2, [pc, #156]	; (80014fc <HAL_DMA_Init+0x15c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d11a      	bne.n	8001498 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_DMA_Init+0x168>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 031c 	and.w	r3, r3, #28
 800146e:	210f      	movs	r1, #15
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	4924      	ldr	r1, [pc, #144]	; (8001508 <HAL_DMA_Init+0x168>)
 8001478:	4013      	ands	r3, r2
 800147a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_DMA_Init+0x168>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	f003 031c 	and.w	r3, r3, #28
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	491d      	ldr	r1, [pc, #116]	; (8001508 <HAL_DMA_Init+0x168>)
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
 8001496:	e019      	b.n	80014cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_DMA_Init+0x16c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 031c 	and.w	r3, r3, #28
 80014a4:	210f      	movs	r1, #15
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	4917      	ldr	r1, [pc, #92]	; (800150c <HAL_DMA_Init+0x16c>)
 80014ae:	4013      	ands	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_DMA_Init+0x16c>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 031c 	and.w	r3, r3, #28
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	4911      	ldr	r1, [pc, #68]	; (800150c <HAL_DMA_Init+0x16c>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40020407 	.word	0x40020407
 80014f4:	bffdfff8 	.word	0xbffdfff8
 80014f8:	cccccccd 	.word	0xcccccccd
 80014fc:	40020000 	.word	0x40020000
 8001500:	bffdfbf8 	.word	0xbffdfbf8
 8001504:	40020400 	.word	0x40020400
 8001508:	400200a8 	.word	0x400200a8
 800150c:	400204a8 	.word	0x400204a8

08001510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_DMA_Start_IT+0x20>
 800152c:	2302      	movs	r3, #2
 800152e:	e04b      	b.n	80015c8 <HAL_DMA_Start_IT+0xb8>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d13a      	bne.n	80015ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2202      	movs	r2, #2
 8001548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f8e0 	bl	800172e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 020e 	orr.w	r2, r2, #14
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e00f      	b.n	80015a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0204 	bic.w	r2, r2, #4
 8001596:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 020a 	orr.w	r2, r2, #10
 80015a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2204      	movs	r2, #4
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d026      	beq.n	800164a <HAL_DMA_IRQHandler+0x7a>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	d021      	beq.n	800164a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0204 	bic.w	r2, r2, #4
 8001622:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f003 021c 	and.w	r2, r3, #28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2104      	movs	r1, #4
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	2b00      	cmp	r3, #0
 800163e:	d071      	beq.n	8001724 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001648:	e06c      	b.n	8001724 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f003 031c 	and.w	r3, r3, #28
 8001652:	2202      	movs	r2, #2
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d02e      	beq.n	80016bc <HAL_DMA_IRQHandler+0xec>
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d029      	beq.n	80016bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10b      	bne.n	800168e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020a 	bic.w	r2, r2, #10
 8001684:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f003 021c 	and.w	r2, r3, #28
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	2102      	movs	r1, #2
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d038      	beq.n	8001724 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ba:	e033      	b.n	8001724 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 031c 	and.w	r3, r3, #28
 80016c4:	2208      	movs	r2, #8
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d02a      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d025      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 020e 	bic.w	r2, r2, #14
 80016e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 021c 	and.w	r2, r3, #28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172e:	b480      	push	{r7}
 8001730:	b085      	sub	sp, #20
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f003 021c 	and.w	r2, r3, #28
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b10      	cmp	r3, #16
 800175e:	d108      	bne.n	8001772 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001770:	e007      	b.n	8001782 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	60da      	str	r2, [r3, #12]
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800179e:	e17f      	b.n	8001aa0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8171 	beq.w	8001a9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d118      	bne.n	8001870 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001844:	2201      	movs	r2, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f003 0201 	and.w	r2, r3, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b03      	cmp	r3, #3
 800187a:	d017      	beq.n	80018ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d123      	bne.n	8001900 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	08da      	lsrs	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3208      	adds	r2, #8
 80018fa:	6939      	ldr	r1, [r7, #16]
 80018fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80ac 	beq.w	8001a9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6613      	str	r3, [r2, #96]	; 0x60
 800194e:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_GPIO_Init+0x330>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800195a:	4a5a      	ldr	r2, [pc, #360]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x242>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_GPIO_Init+0x338>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x23e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4e      	ldr	r2, [pc, #312]	; (8001acc <HAL_GPIO_Init+0x33c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x23a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_GPIO_Init+0x340>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x236>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4c      	ldr	r2, [pc, #304]	; (8001ad4 <HAL_GPIO_Init+0x344>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x232>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_GPIO_Init+0x348>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x22e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x34c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x22a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e00c      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00a      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019be:	2305      	movs	r3, #5
 80019c0:	e008      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x244>
 80019d2:	2300      	movs	r3, #0
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	f002 0203 	and.w	r2, r2, #3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4093      	lsls	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e4:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_GPIO_Init+0x334>)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_GPIO_Init+0x350>)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae78 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	48000800 	.word	0x48000800
 8001ad0:	48000c00 	.word	0x48000c00
 8001ad4:	48001000 	.word	0x48001000
 8001ad8:	48001400 	.word	0x48001400
 8001adc:	48001800 	.word	0x48001800
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40007000 	.word	0x40007000

08001b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b3e:	d130      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4c:	d038      	beq.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2232      	movs	r2, #50	; 0x32
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9b      	lsrs	r3, r3, #18
 8001b70:	3301      	adds	r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b74:	e002      	b.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d102      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f2      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9c:	d110      	bne.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e00f      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d007      	beq.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb8:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	431bde83 	.word	0x431bde83

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e3ca      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b97      	ldr	r3, [pc, #604]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b94      	ldr	r3, [pc, #592]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80e4 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4a>
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	f040 808b 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	f040 8087 	bne.w	8001d34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e3a2      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_RCC_OscConfig+0x7c>
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_OscConfig+0x88>
 8001c58:	4b7c      	ldr	r3, [pc, #496]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d223      	bcs.n	8001cb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd55 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e383      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7c:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a72      	ldr	r2, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	496d      	ldr	r1, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4968      	ldr	r1, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
 8001cae:	e025      	b.n	8001cfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4960      	ldr	r1, [pc, #384]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	495b      	ldr	r1, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fd15 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e343      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cfc:	f000 fc4a 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b52      	ldr	r3, [pc, #328]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	4950      	ldr	r1, [pc, #320]	; (8001e50 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_RCC_OscConfig+0x278>)
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f9ab 	bl	800107c <HAL_InitTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d052      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	e327      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d3c:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a42      	ldr	r2, [pc, #264]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f9e8 	bl	800111c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d50:	f7ff f9e4 	bl	800111c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e310      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a36      	ldr	r2, [pc, #216]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4931      	ldr	r1, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	492c      	ldr	r1, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	e01a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a29      	ldr	r2, [pc, #164]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dae:	f7ff f9b5 	bl	800111c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db6:	f7ff f9b1 	bl	800111c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e2dd      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x1da>
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d074      	beq.n	8001ece <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x21a>
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d10e      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d064      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d160      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e2ba      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x24a>
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e026      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2e:	d115      	bne.n	8001e5c <HAL_RCC_OscConfig+0x280>
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a02      	ldr	r2, [pc, #8]	; (8001e4c <HAL_RCC_OscConfig+0x270>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x298>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	080051c8 	.word	0x080051c8
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	4ba0      	ldr	r3, [pc, #640]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a9f      	ldr	r2, [pc, #636]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a9c      	ldr	r2, [pc, #624]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f94e 	bl	800111c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f94a 	bl	800111c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e276      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2a8>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f93a 	bl	800111c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f936 	bl	800111c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e262      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x2d0>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d060      	beq.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x310>
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d116      	bne.n	8001f1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eec:	4b7c      	ldr	r3, [pc, #496]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x328>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e23f      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b76      	ldr	r3, [pc, #472]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	061b      	lsls	r3, r3, #24
 8001f12:	4973      	ldr	r1, [pc, #460]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f18:	e040      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d023      	beq.n	8001f6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f22:	4b6f      	ldr	r3, [pc, #444]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6e      	ldr	r2, [pc, #440]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f8f5 	bl	800111c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff f8f1 	bl	800111c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e21d      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f48:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f54:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	495f      	ldr	r1, [pc, #380]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a5c      	ldr	r2, [pc, #368]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f8d1 	bl	800111c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff f8cd 	bl	800111c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e1f9      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03c      	beq.n	8002022 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	4a4a      	ldr	r2, [pc, #296]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f8ac 	bl	800111c <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f8a8 	bl	800111c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1d4      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ef      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001fe8:	e01b      	b.n	8002022 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7ff f88f 	bl	800111c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff f88b 	bl	800111c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1b7      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1ef      	bne.n	8002002 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a6 	beq.w	800217c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10d      	bne.n	800205c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a26      	ldr	r2, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d118      	bne.n	800209a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 800206e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002074:	f7ff f852 	bl	800111c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207c:	f7ff f84e 	bl	800111c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e17a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x508>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d8>
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e029      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d115      	bne.n	80020e8 <HAL_RCC_OscConfig+0x50c>
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x52c>
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
 80020e8:	4b9c      	ldr	r3, [pc, #624]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a9b      	ldr	r2, [pc, #620]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	4b98      	ldr	r3, [pc, #608]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a97      	ldr	r2, [pc, #604]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7ff f804 	bl	800111c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7ff f800 	bl	800111c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e12a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ed      	beq.n	8002118 <HAL_RCC_OscConfig+0x53c>
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe ffed 	bl	800111c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe ffe9 	bl	800111c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e113      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ed      	bne.n	8002146 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80fe 	beq.w	8002382 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	2b02      	cmp	r3, #2
 800218c:	f040 80d0 	bne.w	8002330 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002190:	4b72      	ldr	r3, [pc, #456]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d130      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	3b01      	subs	r3, #1
 80021b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d127      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11f      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d0:	2a07      	cmp	r2, #7
 80021d2:	bf14      	ite	ne
 80021d4:	2201      	movne	r2, #1
 80021d6:	2200      	moveq	r2, #0
 80021d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021da:	4293      	cmp	r3, r2
 80021dc:	d113      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d06e      	beq.n	80022e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d069      	beq.n	80022e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0ad      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002228:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800222e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002234:	f7fe ff72 	bl	800111c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe ff6e 	bl	800111c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e09a      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x784>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800226a:	3a01      	subs	r2, #1
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002274:	0212      	lsls	r2, r2, #8
 8002276:	4311      	orrs	r1, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800227c:	0852      	lsrs	r2, r2, #1
 800227e:	3a01      	subs	r2, #1
 8002280:	0552      	lsls	r2, r2, #21
 8002282:	4311      	orrs	r1, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002288:	0852      	lsrs	r2, r2, #1
 800228a:	3a01      	subs	r2, #1
 800228c:	0652      	lsls	r2, r2, #25
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002294:	0912      	lsrs	r2, r2, #4
 8002296:	0452      	lsls	r2, r2, #17
 8002298:	430a      	orrs	r2, r1
 800229a:	4930      	ldr	r1, [pc, #192]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a2a      	ldr	r2, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7fe ff30 	bl	800111c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ff2c 	bl	800111c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e058      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022de:	e050      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e04f      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d148      	bne.n	8002382 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x780>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a16      	ldr	r2, [pc, #88]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002308:	f7fe ff08 	bl	800111c <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe ff04 	bl	800111c <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e030      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x734>
 800232e:	e028      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d023      	beq.n	800237e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x780>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x780>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe feeb 	bl	800111c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e00c      	b.n	8002364 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fee7 	bl	800111c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d905      	bls.n	8002364 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e013      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
 800235c:	40021000 	.word	0x40021000
 8002360:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ec      	bne.n	800234a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4905      	ldr	r1, [pc, #20]	; (800238c <HAL_RCC_OscConfig+0x7b0>)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x7b4>)
 8002378:	4013      	ands	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e001      	b.n	8002382 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	feeefffc 	.word	0xfeeefffc

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e7      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b75      	ldr	r3, [pc, #468]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4970      	ldr	r1, [pc, #448]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0cf      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d010      	beq.n	8002406 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b66      	ldr	r3, [pc, #408]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d908      	bls.n	8002406 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4960      	ldr	r1, [pc, #384]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04c      	beq.n	80024ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b5a      	ldr	r3, [pc, #360]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d121      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0a6      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d115      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e09a      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800244a:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e08e      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e086      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4943      	ldr	r1, [pc, #268]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe fe4e 	bl	800111c <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fe4a 	bl	800111c <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e06e      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d208      	bcs.n	80024da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	492b      	ldr	r1, [pc, #172]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d210      	bcs.n	800250a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f8:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_ClockConfig+0x1ec>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e036      	b.n	8002578 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4918      	ldr	r1, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d009      	beq.n	8002548 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4910      	ldr	r1, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002548:	f000 f824 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	490b      	ldr	r1, [pc, #44]	; (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
 8002564:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002566:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x1fc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fd85 	bl	800107c <HAL_InitTick>
 8002572:	4603      	mov	r3, r0
 8002574:	72fb      	strb	r3, [r7, #11]

  return status;
 8002576:	7afb      	ldrb	r3, [r7, #11]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	080051c8 	.word	0x080051c8
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ac:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d121      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d11e      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f0:	4a2b      	ldr	r2, [pc, #172]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002604:	e00a      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e004      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002618:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800261a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d134      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0xa6>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d003      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0xac>
 8002638:	e005      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800263c:	617b      	str	r3, [r7, #20]
      break;
 800263e:	e005      	b.n	800264c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002642:	617b      	str	r3, [r7, #20]
      break;
 8002644:	e002      	b.n	800264c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	617b      	str	r3, [r7, #20]
      break;
 800264a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	3301      	adds	r3, #1
 8002658:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	fb03 f202 	mul.w	r2, r3, r2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0e5b      	lsrs	r3, r3, #25
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	3301      	adds	r3, #1
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800268c:	69bb      	ldr	r3, [r7, #24]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	080051e0 	.word	0x080051e0
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	007a1200 	.word	0x007a1200

080026ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000000 	.word	0x20000000

080026c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c8:	f7ff fff0 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	080051d8 	.word	0x080051d8

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f4:	f7ff ffda 	bl	80026ac <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0adb      	lsrs	r3, r3, #11
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	080051d8 	.word	0x080051d8

0800271c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002728:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff f9ee 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
 800273a:	e014      	b.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	; 0x58
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002754:	f7ff f9de 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
 8002758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800276c:	d10b      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d919      	bls.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2ba0      	cmp	r3, #160	; 0xa0
 8002778:	d902      	bls.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277a:	2302      	movs	r3, #2
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e013      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e010      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d902      	bls.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800278c:	2303      	movs	r3, #3
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e00a      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d102      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002798:	2302      	movs	r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	e004      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b70      	cmp	r3, #112	; 0x70
 80027a2:	d101      	bne.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	4909      	ldr	r1, [pc, #36]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40022000 	.word	0x40022000

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d041      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002800:	d02a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002806:	d824      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002808:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800280e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002812:	d81e      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281c:	d010      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281e:	e018      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002820:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282c:	e015      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fabb 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800283e:	e00c      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3320      	adds	r3, #32
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fba6 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	74fb      	strb	r3, [r7, #19]
      break;
 8002856:	e000      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800286e:	4973      	ldr	r1, [pc, #460]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002876:	e001      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d041      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800288c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002890:	d02a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002896:	d824      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800289e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028a2:	d81e      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d010      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ae:	e018      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b0:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028bc:	e015      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa73 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ce:	e00c      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3320      	adds	r3, #32
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb5e 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e0:	e003      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	74fb      	strb	r3, [r7, #19]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f0:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fe:	494f      	ldr	r1, [pc, #316]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a0 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	; 0x58
 8002940:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295c:	f7fe fbde 	bl	800111c <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002962:	e009      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fe fbda 	bl	800111c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	74fb      	strb	r3, [r7, #19]
        break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d15c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800298a:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01f      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d019      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a8:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fb99 	bl	800111c <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00b      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fb95 	bl	800111c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	74fb      	strb	r3, [r7, #19]
            break;
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ec      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a48:	7c7b      	ldrb	r3, [r7, #17]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a9d      	ldr	r2, [pc, #628]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a66:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 0203 	bic.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	4994      	ldr	r1, [pc, #592]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 020c 	bic.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	498c      	ldr	r1, [pc, #560]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aaa:	4b87      	ldr	r3, [pc, #540]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	4983      	ldr	r1, [pc, #524]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002acc:	4b7e      	ldr	r3, [pc, #504]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	497b      	ldr	r1, [pc, #492]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aee:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afc:	4972      	ldr	r1, [pc, #456]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b10:	4b6d      	ldr	r3, [pc, #436]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	496a      	ldr	r1, [pc, #424]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b32:	4b65      	ldr	r3, [pc, #404]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	4961      	ldr	r1, [pc, #388]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b54:	4b5c      	ldr	r3, [pc, #368]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	4959      	ldr	r1, [pc, #356]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b76:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b84:	4950      	ldr	r1, [pc, #320]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b98:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	4948      	ldr	r1, [pc, #288]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bba:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	493f      	ldr	r1, [pc, #252]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bea:	4937      	ldr	r1, [pc, #220]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f8c8 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	491f      	ldr	r1, [pc, #124]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c64:	60d3      	str	r3, [r2, #12]
 8002c66:	e011      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f899 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d02b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f867 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	4928      	ldr	r1, [pc, #160]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f844 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d014      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f925 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d76:	490d      	ldr	r1, [pc, #52]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dbe:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
       ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d047      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e044      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d018      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x86>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d825      	bhi.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x62>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d009      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x74>
 8002e10:	e020      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e12:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e01a      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e013      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e36:	4b57      	ldr	r3, [pc, #348]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e52:	e006      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e004      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4944      	ldr	r1, [pc, #272]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d17d      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f940 	bl	800111c <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea0:	f7fe f93c 	bl	800111c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d160      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	0912      	lsrs	r2, r2, #4
 8002ee4:	0452      	lsls	r2, r2, #17
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	492a      	ldr	r1, [pc, #168]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	610b      	str	r3, [r1, #16]
 8002eee:	e027      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d112      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef6:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	0211      	lsls	r1, r2, #8
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6912      	ldr	r2, [r2, #16]
 8002f0c:	0852      	lsrs	r2, r2, #1
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0552      	lsls	r2, r2, #21
 8002f12:	430a      	orrs	r2, r1
 8002f14:	491f      	ldr	r1, [pc, #124]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	610b      	str	r3, [r1, #16]
 8002f1a:	e011      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6952      	ldr	r2, [r2, #20]
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	3a01      	subs	r2, #1
 8002f36:	0652      	lsls	r2, r2, #25
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4916      	ldr	r1, [pc, #88]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fe f8e6 	bl	800111c <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fe f8e2 	bl	800111c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
          break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4904      	ldr	r1, [pc, #16]	; (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fb2:	4b67      	ldr	r3, [pc, #412]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d047      	beq.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d018      	beq.n	800301e <RCCEx_PLLSAI2_Config+0x86>
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d825      	bhi.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <RCCEx_PLLSAI2_Config+0x62>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d009      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x74>
 8002ff8:	e020      	b.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffa:	4b55      	ldr	r3, [pc, #340]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11d      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300a:	e01a      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800300c:	4b50      	ldr	r3, [pc, #320]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e013      	b.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800301e:	4b4c      	ldr	r3, [pc, #304]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302a:	4b49      	ldr	r3, [pc, #292]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303a:	e006      	b.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e004      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304a:	bf00      	nop
    }

    if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	430b      	orrs	r3, r1
 8003068:	4939      	ldr	r1, [pc, #228]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d167      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a35      	ldr	r2, [pc, #212]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fe f84c 	bl	800111c <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003086:	e009      	b.n	800309c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003088:	f7fe f848 	bl	800111c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	73fb      	strb	r3, [r7, #15]
        break;
 800309a:	e005      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800309c:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ef      	bne.n	8003088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d14a      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d111      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b4:	4b26      	ldr	r3, [pc, #152]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	0211      	lsls	r1, r2, #8
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	0912      	lsrs	r2, r2, #4
 80030cc:	0452      	lsls	r2, r2, #17
 80030ce:	430a      	orrs	r2, r1
 80030d0:	491f      	ldr	r1, [pc, #124]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	614b      	str	r3, [r1, #20]
 80030d6:	e011      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6912      	ldr	r2, [r2, #16]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0652      	lsls	r2, r2, #25
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4916      	ldr	r1, [pc, #88]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fe f808 	bl	800111c <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310e:	e009      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003110:	f7fe f804 	bl	800111c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	73fb      	strb	r3, [r7, #15]
          break;
 8003122:	e005      	b.n	8003130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4904      	ldr	r1, [pc, #16]	; (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e049      	b.n	80031fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fe4a 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 fe60 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e04f      	b.n	80032bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a23      	ldr	r2, [pc, #140]	; (80032c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d018      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_TIM_Base_Start_IT+0xc8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1e      	ldr	r2, [pc, #120]	; (80032d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x76>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d115      	bne.n	80032a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003282:	4013      	ands	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d015      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0xb4>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d011      	beq.n	80032b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	e008      	b.n	80032b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e000      	b.n	80032ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40000c00 	.word	0x40000c00
 80032d8:	40013400 	.word	0x40013400
 80032dc:	40014000 	.word	0x40014000
 80032e0:	00010007 	.word	0x00010007

080032e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e049      	b.n	800338a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fd36 	bl	8000d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3304      	adds	r3, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f000 fd98 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e03c      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0xa6>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d109      	bne.n	80033da <HAL_TIM_PWM_Start_DMA+0x46>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	e02f      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0xa6>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d109      	bne.n	80033f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e022      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0xa6>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d109      	bne.n	800340e <HAL_TIM_PWM_Start_DMA+0x7a>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	e015      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0xa6>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b10      	cmp	r3, #16
 8003412:	d109      	bne.n	8003428 <HAL_TIM_PWM_Start_DMA+0x94>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e008      	b.n	800343a <HAL_TIM_PWM_Start_DMA+0xa6>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	e1ab      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e03c      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x142>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d109      	bne.n	8003476 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	e02f      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start_DMA+0xfc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x142>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b0c      	cmp	r3, #12
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start_DMA+0x116>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x142>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start_DMA+0x130>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start_DMA+0x142>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d034      	beq.n	8003544 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_TIM_PWM_Start_DMA+0x152>
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e157      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start_DMA+0x166>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	e026      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start_DMA+0x176>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003508:	e01e      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start_DMA+0x186>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	e016      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start_DMA+0x196>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003528:	e00e      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b10      	cmp	r3, #16
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003538:	e006      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003542:	e001      	b.n	8003548 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e128      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	f200 80ae 	bhi.w	80036ac <HAL_TIM_PWM_Start_DMA+0x318>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800358d 	.word	0x0800358d
 800355c:	080036ad 	.word	0x080036ad
 8003560:	080036ad 	.word	0x080036ad
 8003564:	080036ad 	.word	0x080036ad
 8003568:	080035d5 	.word	0x080035d5
 800356c:	080036ad 	.word	0x080036ad
 8003570:	080036ad 	.word	0x080036ad
 8003574:	080036ad 	.word	0x080036ad
 8003578:	0800361d 	.word	0x0800361d
 800357c:	080036ad 	.word	0x080036ad
 8003580:	080036ad 	.word	0x080036ad
 8003584:	080036ad 	.word	0x080036ad
 8003588:	08003665 	.word	0x08003665
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	4a84      	ldr	r2, [pc, #528]	; (80037a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	4a83      	ldr	r2, [pc, #524]	; (80037a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800359a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	4a82      	ldr	r2, [pc, #520]	; (80037ac <HAL_TIM_PWM_Start_DMA+0x418>)
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3334      	adds	r3, #52	; 0x34
 80035b0:	461a      	mov	r2, r3
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	f7fd ffac 	bl	8001510 <HAL_DMA_Start_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e0eb      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d0:	60da      	str	r2, [r3, #12]
      break;
 80035d2:	e06e      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	4a72      	ldr	r2, [pc, #456]	; (80037a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 80035da:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	4a71      	ldr	r2, [pc, #452]	; (80037a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	4a70      	ldr	r2, [pc, #448]	; (80037ac <HAL_TIM_PWM_Start_DMA+0x418>)
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3338      	adds	r3, #56	; 0x38
 80035f8:	461a      	mov	r2, r3
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	f7fd ff88 	bl	8001510 <HAL_DMA_Start_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0c7      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003618:	60da      	str	r2, [r3, #12]
      break;
 800361a:	e04a      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a60      	ldr	r2, [pc, #384]	; (80037a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 800362a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <HAL_TIM_PWM_Start_DMA+0x418>)
 8003632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	333c      	adds	r3, #60	; 0x3c
 8003640:	461a      	mov	r2, r3
 8003642:	887b      	ldrh	r3, [r7, #2]
 8003644:	f7fd ff64 	bl	8001510 <HAL_DMA_Start_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0a3      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003660:	60da      	str	r2, [r3, #12]
      break;
 8003662:	e026      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4a4e      	ldr	r2, [pc, #312]	; (80037a4 <HAL_TIM_PWM_Start_DMA+0x410>)
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8003672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_TIM_PWM_Start_DMA+0x418>)
 800367a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3340      	adds	r3, #64	; 0x40
 8003688:	461a      	mov	r2, r3
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	f7fd ff40 	bl	8001510 <HAL_DMA_Start_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e07f      	b.n	800379a <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a8:	60da      	str	r2, [r3, #12]
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
      break;
 80036b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d16f      	bne.n	8003798 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	68b9      	ldr	r1, [r7, #8]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 ff39 	bl	8004538 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a39      	ldr	r2, [pc, #228]	; (80037b0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a37      	ldr	r2, [pc, #220]	; (80037b4 <HAL_TIM_PWM_Start_DMA+0x420>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <HAL_TIM_PWM_Start_DMA+0x424>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_TIM_PWM_Start_DMA+0x428>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x364>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a33      	ldr	r2, [pc, #204]	; (80037c0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_PWM_Start_DMA+0x368>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_TIM_PWM_Start_DMA+0x36a>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a26      	ldr	r2, [pc, #152]	; (80037b0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d01d      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d018      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a24      	ldr	r2, [pc, #144]	; (80037c8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00e      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_TIM_PWM_Start_DMA+0x438>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d009      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1a      	ldr	r2, [pc, #104]	; (80037b4 <HAL_TIM_PWM_Start_DMA+0x420>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_TIM_PWM_Start_DMA+0x3c4>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d115      	bne.n	8003784 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b06      	cmp	r3, #6
 8003768:	d015      	beq.n	8003796 <HAL_TIM_PWM_Start_DMA+0x402>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d011      	beq.n	8003796 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	e008      	b.n	8003796 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e000      	b.n	8003798 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08003d47 	.word	0x08003d47
 80037a8:	08003def 	.word	0x08003def
 80037ac:	08003cb5 	.word	0x08003cb5
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40013400 	.word	0x40013400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	00010007 	.word	0x00010007

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa1a 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa0c 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa1d 	bl	8003c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9f0 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9e2 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9f3 	bl	8003c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f9c6 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f9b8 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9c9 	bl	8003c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f99c 	bl	8003c50 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f98e 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f99f 	bl	8003c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fc ffef 	bl	8000936 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 ff10 	bl	80047a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d10e      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d107      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 ff03 	bl	80047b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d10e      	bne.n	80039de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d107      	bne.n	80039de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f957 	bl	8003c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0220 	mvn.w	r2, #32
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fec3 	bl	8004790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e0ff      	b.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b14      	cmp	r3, #20
 8003a3e:	f200 80f0 	bhi.w	8003c22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003c23 	.word	0x08003c23
 8003a50:	08003c23 	.word	0x08003c23
 8003a54:	08003c23 	.word	0x08003c23
 8003a58:	08003add 	.word	0x08003add
 8003a5c:	08003c23 	.word	0x08003c23
 8003a60:	08003c23 	.word	0x08003c23
 8003a64:	08003c23 	.word	0x08003c23
 8003a68:	08003b1f 	.word	0x08003b1f
 8003a6c:	08003c23 	.word	0x08003c23
 8003a70:	08003c23 	.word	0x08003c23
 8003a74:	08003c23 	.word	0x08003c23
 8003a78:	08003b5f 	.word	0x08003b5f
 8003a7c:	08003c23 	.word	0x08003c23
 8003a80:	08003c23 	.word	0x08003c23
 8003a84:	08003c23 	.word	0x08003c23
 8003a88:	08003ba1 	.word	0x08003ba1
 8003a8c:	08003c23 	.word	0x08003c23
 8003a90:	08003c23 	.word	0x08003c23
 8003a94:	08003c23 	.word	0x08003c23
 8003a98:	08003be1 	.word	0x08003be1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fa72 	bl	8003f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6999      	ldr	r1, [r3, #24]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	619a      	str	r2, [r3, #24]
      break;
 8003ada:	e0a5      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fae2 	bl	80040ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6999      	ldr	r1, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	021a      	lsls	r2, r3, #8
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	619a      	str	r2, [r3, #24]
      break;
 8003b1c:	e084      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fb4b 	bl	80041c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
      break;
 8003b5c:	e064      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fbb3 	bl	80042d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69d9      	ldr	r1, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	021a      	lsls	r2, r3, #8
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	61da      	str	r2, [r3, #28]
      break;
 8003b9e:	e043      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fbfc 	bl	80043a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0204 	bic.w	r2, r2, #4
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bde:	e023      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fc40 	bl	800446c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	021a      	lsls	r2, r3, #8
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c20:	e002      	b.n	8003c28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
      break;
 8003c26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d107      	bne.n	8003cdc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cda:	e02a      	b.n	8003d32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d107      	bne.n	8003cf6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2202      	movs	r2, #2
 8003cea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf4:	e01d      	b.n	8003d32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2204      	movs	r2, #4
 8003d04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0e:	e010      	b.n	8003d32 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d107      	bne.n	8003d2a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d28:	e003      	b.n	8003d32 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff ffb4 	bl	8003ca0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	771a      	strb	r2, [r3, #28]
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10b      	bne.n	8003d76 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d136      	bne.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d74:	e031      	b.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d10b      	bne.n	8003d98 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2202      	movs	r2, #2
 8003d84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d125      	bne.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d96:	e020      	b.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10b      	bne.n	8003dba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2204      	movs	r2, #4
 8003da6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d114      	bne.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	e00f      	b.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d10a      	bne.n	8003dda <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff ff42 	bl	8003c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d103      	bne.n	8003e0e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	771a      	strb	r2, [r3, #28]
 8003e0c:	e019      	b.n	8003e42 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d103      	bne.n	8003e20 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	771a      	strb	r2, [r3, #28]
 8003e1e:	e010      	b.n	8003e42 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d103      	bne.n	8003e32 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
 8003e30:	e007      	b.n	8003e42 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d102      	bne.n	8003e42 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff ff18 	bl	8003c78 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	771a      	strb	r2, [r3, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <TIM_Base_SetConfig+0x114>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3d      	ldr	r2, [pc, #244]	; (8003f70 <TIM_Base_SetConfig+0x118>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <TIM_Base_SetConfig+0x11c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <TIM_Base_SetConfig+0x120>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3a      	ldr	r2, [pc, #232]	; (8003f7c <TIM_Base_SetConfig+0x124>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2f      	ldr	r2, [pc, #188]	; (8003f6c <TIM_Base_SetConfig+0x114>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <TIM_Base_SetConfig+0x118>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <TIM_Base_SetConfig+0x11c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <TIM_Base_SetConfig+0x120>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <TIM_Base_SetConfig+0x124>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <TIM_Base_SetConfig+0x128>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <TIM_Base_SetConfig+0x12c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <TIM_Base_SetConfig+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <TIM_Base_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <TIM_Base_SetConfig+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a10      	ldr	r2, [pc, #64]	; (8003f84 <TIM_Base_SetConfig+0x12c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <TIM_Base_SetConfig+0x130>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800

08003f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0302 	bic.w	r3, r3, #2
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a2c      	ldr	r2, [pc, #176]	; (8004098 <TIM_OC1_SetConfig+0x10c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00f      	beq.n	800400c <TIM_OC1_SetConfig+0x80>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a2b      	ldr	r2, [pc, #172]	; (800409c <TIM_OC1_SetConfig+0x110>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_OC1_SetConfig+0x80>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <TIM_OC1_SetConfig+0x114>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <TIM_OC1_SetConfig+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <TIM_OC1_SetConfig+0x118>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_OC1_SetConfig+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <TIM_OC1_SetConfig+0x11c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10c      	bne.n	8004026 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f023 0308 	bic.w	r3, r3, #8
 8004012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 0304 	bic.w	r3, r3, #4
 8004024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <TIM_OC1_SetConfig+0x10c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_OC1_SetConfig+0xc2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a1a      	ldr	r2, [pc, #104]	; (800409c <TIM_OC1_SetConfig+0x110>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_OC1_SetConfig+0xc2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_OC1_SetConfig+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_OC1_SetConfig+0xc2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_OC1_SetConfig+0x118>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC1_SetConfig+0xc2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <TIM_OC1_SetConfig+0x11c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40013400 	.word	0x40013400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40014400 	.word	0x40014400
 80040a8:	40014800 	.word	0x40014800

080040ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0320 	bic.w	r3, r3, #32
 80040fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a28      	ldr	r2, [pc, #160]	; (80041ac <TIM_OC2_SetConfig+0x100>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC2_SetConfig+0x6c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a27      	ldr	r2, [pc, #156]	; (80041b0 <TIM_OC2_SetConfig+0x104>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10d      	bne.n	8004134 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <TIM_OC2_SetConfig+0x100>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00f      	beq.n	800415c <TIM_OC2_SetConfig+0xb0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <TIM_OC2_SetConfig+0x104>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00b      	beq.n	800415c <TIM_OC2_SetConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <TIM_OC2_SetConfig+0x108>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <TIM_OC2_SetConfig+0xb0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <TIM_OC2_SetConfig+0x10c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC2_SetConfig+0xb0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <TIM_OC2_SetConfig+0x110>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d113      	bne.n	8004184 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	621a      	str	r2, [r3, #32]
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a27      	ldr	r2, [pc, #156]	; (80042bc <TIM_OC3_SetConfig+0xfc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0x6a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a26      	ldr	r2, [pc, #152]	; (80042c0 <TIM_OC3_SetConfig+0x100>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <TIM_OC3_SetConfig+0xfc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_OC3_SetConfig+0xae>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <TIM_OC3_SetConfig+0x100>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_OC3_SetConfig+0xae>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <TIM_OC3_SetConfig+0x104>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_OC3_SetConfig+0xae>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <TIM_OC3_SetConfig+0x108>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC3_SetConfig+0xae>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a18      	ldr	r2, [pc, #96]	; (80042cc <TIM_OC3_SetConfig+0x10c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d113      	bne.n	8004296 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	621a      	str	r2, [r3, #32]
}
 80042b0:	bf00      	nop
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40013400 	.word	0x40013400
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800

080042d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	031b      	lsls	r3, r3, #12
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <TIM_OC4_SetConfig+0xc0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_OC4_SetConfig+0x84>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <TIM_OC4_SetConfig+0xc4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_OC4_SetConfig+0x84>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a16      	ldr	r2, [pc, #88]	; (8004398 <TIM_OC4_SetConfig+0xc8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_OC4_SetConfig+0x84>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <TIM_OC4_SetConfig+0xcc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC4_SetConfig+0x84>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <TIM_OC4_SetConfig+0xd0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d109      	bne.n	8004368 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40013400 	.word	0x40013400
 8004398:	40014000 	.word	0x40014000
 800439c:	40014400 	.word	0x40014400
 80043a0:	40014800 	.word	0x40014800

080043a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a17      	ldr	r2, [pc, #92]	; (8004458 <TIM_OC5_SetConfig+0xb4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_OC5_SetConfig+0x7a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a16      	ldr	r2, [pc, #88]	; (800445c <TIM_OC5_SetConfig+0xb8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_OC5_SetConfig+0x7a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <TIM_OC5_SetConfig+0xbc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_OC5_SetConfig+0x7a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <TIM_OC5_SetConfig+0xc0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_OC5_SetConfig+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a13      	ldr	r2, [pc, #76]	; (8004468 <TIM_OC5_SetConfig+0xc4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d109      	bne.n	8004432 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800

0800446c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	051b      	lsls	r3, r3, #20
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a18      	ldr	r2, [pc, #96]	; (8004524 <TIM_OC6_SetConfig+0xb8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00f      	beq.n	80044e8 <TIM_OC6_SetConfig+0x7c>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a17      	ldr	r2, [pc, #92]	; (8004528 <TIM_OC6_SetConfig+0xbc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_OC6_SetConfig+0x7c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a16      	ldr	r2, [pc, #88]	; (800452c <TIM_OC6_SetConfig+0xc0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_OC6_SetConfig+0x7c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a15      	ldr	r2, [pc, #84]	; (8004530 <TIM_OC6_SetConfig+0xc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC6_SetConfig+0x7c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM_OC6_SetConfig+0xc8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d109      	bne.n	80044fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	029b      	lsls	r3, r3, #10
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40013400 	.word	0x40013400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800

08004538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e068      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2e      	ldr	r2, [pc, #184]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2d      	ldr	r2, [pc, #180]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d108      	bne.n	80045e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d01d      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800460e:	d018      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00e      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40013400 	.word	0x40013400
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40014000 	.word	0x40014000

08004694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e065      	b.n	800477c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a16      	ldr	r2, [pc, #88]	; (8004788 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a14      	ldr	r2, [pc, #80]	; (800478c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d115      	bne.n	800476a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	051b      	lsls	r3, r3, #20
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40013400 	.word	0x40013400

08004790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e040      	b.n	8004860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fb9e 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f82c 	bl	8004868 <UART_SetConfig>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e022      	b.n	8004860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fad8 	bl	8004dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fb5f 	bl	8004f1c <UART_CheckIdleState>
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b08a      	sub	sp, #40	; 0x28
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	431a      	orrs	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4313      	orrs	r3, r2
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4ba4      	ldr	r3, [pc, #656]	; (8004b28 <UART_SetConfig+0x2c0>)
 8004898:	4013      	ands	r3, r2
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a99      	ldr	r2, [pc, #612]	; (8004b2c <UART_SetConfig+0x2c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	4313      	orrs	r3, r2
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a90      	ldr	r2, [pc, #576]	; (8004b30 <UART_SetConfig+0x2c8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d126      	bne.n	8004940 <UART_SetConfig+0xd8>
 80048f2:	4b90      	ldr	r3, [pc, #576]	; (8004b34 <UART_SetConfig+0x2cc>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d81b      	bhi.n	8004938 <UART_SetConfig+0xd0>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0xa0>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	08004919 	.word	0x08004919
 800490c:	08004929 	.word	0x08004929
 8004910:	08004921 	.word	0x08004921
 8004914:	08004931 	.word	0x08004931
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e116      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e112      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e10e      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e10a      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e106      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7c      	ldr	r2, [pc, #496]	; (8004b38 <UART_SetConfig+0x2d0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d138      	bne.n	80049bc <UART_SetConfig+0x154>
 800494a:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <UART_SetConfig+0x2cc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d82d      	bhi.n	80049b4 <UART_SetConfig+0x14c>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0xf8>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004995 	.word	0x08004995
 8004964:	080049b5 	.word	0x080049b5
 8004968:	080049b5 	.word	0x080049b5
 800496c:	080049b5 	.word	0x080049b5
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049b5 	.word	0x080049b5
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	0800499d 	.word	0x0800499d
 8004984:	080049b5 	.word	0x080049b5
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049b5 	.word	0x080049b5
 8004990:	080049ad 	.word	0x080049ad
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e0d8      	b.n	8004b4e <UART_SetConfig+0x2e6>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a2:	e0d4      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e0d0      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e0cc      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e0c8      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a5e      	ldr	r2, [pc, #376]	; (8004b3c <UART_SetConfig+0x2d4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d125      	bne.n	8004a12 <UART_SetConfig+0x1aa>
 80049c6:	4b5b      	ldr	r3, [pc, #364]	; (8004b34 <UART_SetConfig+0x2cc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049d0:	2b30      	cmp	r3, #48	; 0x30
 80049d2:	d016      	beq.n	8004a02 <UART_SetConfig+0x19a>
 80049d4:	2b30      	cmp	r3, #48	; 0x30
 80049d6:	d818      	bhi.n	8004a0a <UART_SetConfig+0x1a2>
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d00a      	beq.n	80049f2 <UART_SetConfig+0x18a>
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d814      	bhi.n	8004a0a <UART_SetConfig+0x1a2>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <UART_SetConfig+0x182>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d008      	beq.n	80049fa <UART_SetConfig+0x192>
 80049e8:	e00f      	b.n	8004a0a <UART_SetConfig+0x1a2>
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f0:	e0ad      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049f2:	2302      	movs	r3, #2
 80049f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f8:	e0a9      	b.n	8004b4e <UART_SetConfig+0x2e6>
 80049fa:	2304      	movs	r3, #4
 80049fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a00:	e0a5      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a02:	2308      	movs	r3, #8
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a08:	e0a1      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a10:	e09d      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a4a      	ldr	r2, [pc, #296]	; (8004b40 <UART_SetConfig+0x2d8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d125      	bne.n	8004a68 <UART_SetConfig+0x200>
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <UART_SetConfig+0x2cc>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a26:	2bc0      	cmp	r3, #192	; 0xc0
 8004a28:	d016      	beq.n	8004a58 <UART_SetConfig+0x1f0>
 8004a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a2c:	d818      	bhi.n	8004a60 <UART_SetConfig+0x1f8>
 8004a2e:	2b80      	cmp	r3, #128	; 0x80
 8004a30:	d00a      	beq.n	8004a48 <UART_SetConfig+0x1e0>
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d814      	bhi.n	8004a60 <UART_SetConfig+0x1f8>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <UART_SetConfig+0x1d8>
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d008      	beq.n	8004a50 <UART_SetConfig+0x1e8>
 8004a3e:	e00f      	b.n	8004a60 <UART_SetConfig+0x1f8>
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e082      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e07e      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a50:	2304      	movs	r3, #4
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e07a      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5e:	e076      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a60:	2310      	movs	r3, #16
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a66:	e072      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <UART_SetConfig+0x2dc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d12a      	bne.n	8004ac8 <UART_SetConfig+0x260>
 8004a72:	4b30      	ldr	r3, [pc, #192]	; (8004b34 <UART_SetConfig+0x2cc>)
 8004a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a80:	d01a      	beq.n	8004ab8 <UART_SetConfig+0x250>
 8004a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a86:	d81b      	bhi.n	8004ac0 <UART_SetConfig+0x258>
 8004a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8c:	d00c      	beq.n	8004aa8 <UART_SetConfig+0x240>
 8004a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a92:	d815      	bhi.n	8004ac0 <UART_SetConfig+0x258>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <UART_SetConfig+0x238>
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9c:	d008      	beq.n	8004ab0 <UART_SetConfig+0x248>
 8004a9e:	e00f      	b.n	8004ac0 <UART_SetConfig+0x258>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e052      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e04e      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e04a      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004abe:	e046      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac6:	e042      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <UART_SetConfig+0x2c4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d13a      	bne.n	8004b48 <UART_SetConfig+0x2e0>
 8004ad2:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <UART_SetConfig+0x2cc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004adc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae0:	d01a      	beq.n	8004b18 <UART_SetConfig+0x2b0>
 8004ae2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae6:	d81b      	bhi.n	8004b20 <UART_SetConfig+0x2b8>
 8004ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aec:	d00c      	beq.n	8004b08 <UART_SetConfig+0x2a0>
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af2:	d815      	bhi.n	8004b20 <UART_SetConfig+0x2b8>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <UART_SetConfig+0x298>
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d008      	beq.n	8004b10 <UART_SetConfig+0x2a8>
 8004afe:	e00f      	b.n	8004b20 <UART_SetConfig+0x2b8>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e022      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e01e      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e01a      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e016      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004b20:	2310      	movs	r3, #16
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e012      	b.n	8004b4e <UART_SetConfig+0x2e6>
 8004b28:	efff69f3 	.word	0xefff69f3
 8004b2c:	40008000 	.word	0x40008000
 8004b30:	40013800 	.word	0x40013800
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40004400 	.word	0x40004400
 8004b3c:	40004800 	.word	0x40004800
 8004b40:	40004c00 	.word	0x40004c00
 8004b44:	40005000 	.word	0x40005000
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a9f      	ldr	r2, [pc, #636]	; (8004dd0 <UART_SetConfig+0x568>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d17a      	bne.n	8004c4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d824      	bhi.n	8004baa <UART_SetConfig+0x342>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x300>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004bab 	.word	0x08004bab
 8004b78:	08004b9b 	.word	0x08004b9b
 8004b7c:	08004bab 	.word	0x08004bab
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bab 	.word	0x08004bab
 8004b88:	08004ba3 	.word	0x08004ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b8c:	f7fd fd9a 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004b90:	61f8      	str	r0, [r7, #28]
        break;
 8004b92:	e010      	b.n	8004bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b94:	4b8f      	ldr	r3, [pc, #572]	; (8004dd4 <UART_SetConfig+0x56c>)
 8004b96:	61fb      	str	r3, [r7, #28]
        break;
 8004b98:	e00d      	b.n	8004bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b9a:	f7fd fcfb 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8004b9e:	61f8      	str	r0, [r7, #28]
        break;
 8004ba0:	e009      	b.n	8004bb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba6:	61fb      	str	r3, [r7, #28]
        break;
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80fb 	beq.w	8004db4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d305      	bcc.n	8004bda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d903      	bls.n	8004be2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004be0:	e0e8      	b.n	8004db4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	2200      	movs	r2, #0
 8004be6:	461c      	mov	r4, r3
 8004be8:	4615      	mov	r5, r2
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	022b      	lsls	r3, r5, #8
 8004bf4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bf8:	0222      	lsls	r2, r4, #8
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6849      	ldr	r1, [r1, #4]
 8004bfe:	0849      	lsrs	r1, r1, #1
 8004c00:	2000      	movs	r0, #0
 8004c02:	4688      	mov	r8, r1
 8004c04:	4681      	mov	r9, r0
 8004c06:	eb12 0a08 	adds.w	sl, r2, r8
 8004c0a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	4659      	mov	r1, fp
 8004c20:	f7fb fad2 	bl	80001c8 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4613      	mov	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c32:	d308      	bcc.n	8004c46 <UART_SetConfig+0x3de>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3a:	d204      	bcs.n	8004c46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	60da      	str	r2, [r3, #12]
 8004c44:	e0b6      	b.n	8004db4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c4c:	e0b2      	b.n	8004db4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c56:	d15e      	bne.n	8004d16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d828      	bhi.n	8004cb2 <UART_SetConfig+0x44a>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x400>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cb3 	.word	0x08004cb3
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004cb3 	.word	0x08004cb3
 8004c80:	08004cb3 	.word	0x08004cb3
 8004c84:	08004cb3 	.word	0x08004cb3
 8004c88:	08004cab 	.word	0x08004cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fd fd1a 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004c90:	61f8      	str	r0, [r7, #28]
        break;
 8004c92:	e014      	b.n	8004cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7fd fd2c 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8004c98:	61f8      	str	r0, [r7, #28]
        break;
 8004c9a:	e010      	b.n	8004cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	4b4d      	ldr	r3, [pc, #308]	; (8004dd4 <UART_SetConfig+0x56c>)
 8004c9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ca0:	e00d      	b.n	8004cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca2:	f7fd fc77 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8004ca6:	61f8      	str	r0, [r7, #28]
        break;
 8004ca8:	e009      	b.n	8004cbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61fb      	str	r3, [r7, #28]
        break;
 8004cb0:	e005      	b.n	8004cbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d077      	beq.n	8004db4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005a      	lsls	r2, r3, #1
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	2b0f      	cmp	r3, #15
 8004cde:	d916      	bls.n	8004d0e <UART_SetConfig+0x4a6>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce6:	d212      	bcs.n	8004d0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f023 030f 	bic.w	r3, r3, #15
 8004cf0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	8afb      	ldrh	r3, [r7, #22]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	8afa      	ldrh	r2, [r7, #22]
 8004d0a:	60da      	str	r2, [r3, #12]
 8004d0c:	e052      	b.n	8004db4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d14:	e04e      	b.n	8004db4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d827      	bhi.n	8004d6e <UART_SetConfig+0x506>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <UART_SetConfig+0x4bc>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d51 	.word	0x08004d51
 8004d2c:	08004d59 	.word	0x08004d59
 8004d30:	08004d6f 	.word	0x08004d6f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d6f 	.word	0x08004d6f
 8004d3c:	08004d6f 	.word	0x08004d6f
 8004d40:	08004d6f 	.word	0x08004d6f
 8004d44:	08004d67 	.word	0x08004d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d48:	f7fd fcbc 	bl	80026c4 <HAL_RCC_GetPCLK1Freq>
 8004d4c:	61f8      	str	r0, [r7, #28]
        break;
 8004d4e:	e014      	b.n	8004d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d50:	f7fd fcce 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8004d54:	61f8      	str	r0, [r7, #28]
        break;
 8004d56:	e010      	b.n	8004d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <UART_SetConfig+0x56c>)
 8004d5a:	61fb      	str	r3, [r7, #28]
        break;
 8004d5c:	e00d      	b.n	8004d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5e:	f7fd fc19 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8004d62:	61f8      	str	r0, [r7, #28]
        break;
 8004d64:	e009      	b.n	8004d7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6a:	61fb      	str	r3, [r7, #28]
        break;
 8004d6c:	e005      	b.n	8004d7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d78:	bf00      	nop
    }

    if (pclk != 0U)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d019      	beq.n	8004db4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	085a      	lsrs	r2, r3, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d909      	bls.n	8004dae <UART_SetConfig+0x546>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d205      	bcs.n	8004dae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60da      	str	r2, [r3, #12]
 8004dac:	e002      	b.n	8004db4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3728      	adds	r7, #40	; 0x28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40008000 	.word	0x40008000
 8004dd4:	00f42400 	.word	0x00f42400

08004dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01a      	beq.n	8004eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed6:	d10a      	bne.n	8004eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af02      	add	r7, sp, #8
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f2c:	f7fc f8f6 	bl	800111c <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d10e      	bne.n	8004f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f82d 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e023      	b.n	8004fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d10e      	bne.n	8004f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f817 	bl	8004fae <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e00d      	b.n	8004fa6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b09c      	sub	sp, #112	; 0x70
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbe:	e0a5      	b.n	800510c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	f000 80a1 	beq.w	800510c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fc f8a7 	bl	800111c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d13e      	bne.n	800505e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005000:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800500c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e6      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3308      	adds	r3, #8
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	663b      	str	r3, [r7, #96]	; 0x60
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005032:	64ba      	str	r2, [r7, #72]	; 0x48
 8005034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e067      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04f      	beq.n	800510c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507a:	d147      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005084:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800509a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
 80050a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e6      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	613b      	str	r3, [r7, #16]
   return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050d8:	623a      	str	r2, [r7, #32]
 80050da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69f9      	ldr	r1, [r7, #28]
 80050de:	6a3a      	ldr	r2, [r7, #32]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e010      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	429a      	cmp	r2, r3
 8005128:	f43f af4a 	beq.w	8004fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3770      	adds	r7, #112	; 0x70
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	; (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	; (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	; (800517c <__libc_init_array+0x44>)
 800514c:	f000 f820 	bl	8005190 <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08005218 	.word	0x08005218
 8005174:	08005218 	.word	0x08005218
 8005178:	08005218 	.word	0x08005218
 800517c:	0800521c 	.word	0x0800521c

08005180 <memset>:
 8005180:	4402      	add	r2, r0
 8005182:	4603      	mov	r3, r0
 8005184:	4293      	cmp	r3, r2
 8005186:	d100      	bne.n	800518a <memset+0xa>
 8005188:	4770      	bx	lr
 800518a:	f803 1b01 	strb.w	r1, [r3], #1
 800518e:	e7f9      	b.n	8005184 <memset+0x4>

08005190 <_init>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr

0800519c <_fini>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr
