
STM32_project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003814  08003814  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003828  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003828  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b19  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220d  00000000  00000000  00030b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00033bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002691d  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012358  00000000  00000000  0005b2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0418  00000000  00000000  0006d605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015da1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c20  00000000  00000000  0015da70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037ac 	.word	0x080037ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080037ac 	.word	0x080037ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a2a      	ldr	r2, [pc, #168]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b25      	ldr	r3, [pc, #148]	; (8000590 <MX_GPIO_Init+0xc4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b22      	ldr	r3, [pc, #136]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b19      	ldr	r3, [pc, #100]	; (8000590 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a18      	ldr	r2, [pc, #96]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 fdc5 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000554:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xc8>)
 8000566:	f000 fc0d 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056a:	2320      	movs	r3, #32
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fbfe 	bl	8000d84 <HAL_GPIO_Init>

}
 8000588:	bf00      	nop
 800058a:	3728      	adds	r7, #40	; 0x28
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000
 8000594:	48000800 	.word	0x48000800

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa64 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f83a 	bl	8000618 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f7ff ff92 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f9a8 	bl	80008fc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005ac:	f000 f94a 	bl	8000844 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 80005b0:	4816      	ldr	r0, [pc, #88]	; (800060c <main+0x74>)
 80005b2:	f002 f921 	bl	80027f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint8_t flag_LED = 0;

	  if(timer_1 == 0 && flag_LED == 0)
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <main+0x78>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d110      	bne.n	80005e0 <main+0x48>
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <main+0x7c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10c      	bne.n	80005e0 <main+0x48>
	  {
		  timer_1 = 500;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <main+0x78>)
 80005c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005cc:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2120      	movs	r1, #32
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f000 fd7f 	bl	80010d8 <HAL_GPIO_WritePin>
		  flag_LED = 1;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <main+0x7c>)
 80005dc:	2201      	movs	r2, #1
 80005de:	701a      	strb	r2, [r3, #0]
	  }

	  if(timer_1 == 0 && flag_LED == 1)
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x78>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1e6      	bne.n	80005b6 <main+0x1e>
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x7c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1e2      	bne.n	80005b6 <main+0x1e>
	  {
		  timer_1 = 200;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0x78>)
 80005f2:	22c8      	movs	r2, #200	; 0xc8
 80005f4:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 fd6b 	bl	80010d8 <HAL_GPIO_WritePin>
		  flag_LED = 0;
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <main+0x7c>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  {
 8000608:	e7d5      	b.n	80005b6 <main+0x1e>
 800060a:	bf00      	nop
 800060c:	20000034 	.word	0x20000034
 8000610:	2000002a 	.word	0x2000002a
 8000614:	20000028 	.word	0x20000028

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 f8b8 	bl	800379c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f000 fd71 	bl	8001124 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f842 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fda8 	bl	80011d0 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f823 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f970 	bl	8001988 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f80f 	bl	80006d0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]


	init_software_timers(htim);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f80a 	bl	80006dc <init_software_timers>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <init_software_timers>:
volatile uint16_t timer_1 = 0;
volatile uint16_t timer_2 = 0;
volatile uint16_t timer_3 = 0;

void init_software_timers(TIM_HandleTypeDef *htim)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	static uint16_t counter = 0;

	if(htim->Instance == TIM7)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <init_software_timers+0x80>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d130      	bne.n	8000750 <init_software_timers+0x74>
	{
		counter++;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <init_software_timers+0x84>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <init_software_timers+0x84>)
 80006f8:	801a      	strh	r2, [r3, #0]
		if(counter == 100)
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <init_software_timers+0x84>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	2b64      	cmp	r3, #100	; 0x64
 8000700:	d102      	bne.n	8000708 <init_software_timers+0x2c>
		{
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			counter = 0;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <init_software_timers+0x84>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
		}

		if(timer_1)		timer_1--;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <init_software_timers+0x88>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <init_software_timers+0x44>
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <init_software_timers+0x88>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	3b01      	subs	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <init_software_timers+0x88>)
 800071e:	801a      	strh	r2, [r3, #0]
		if(timer_2)		timer_2--;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <init_software_timers+0x8c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	b29b      	uxth	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <init_software_timers+0x5c>
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <init_software_timers+0x8c>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	b29b      	uxth	r3, r3
 8000730:	3b01      	subs	r3, #1
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <init_software_timers+0x8c>)
 8000736:	801a      	strh	r2, [r3, #0]
		if(timer_3)		timer_3--;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <init_software_timers+0x90>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	b29b      	uxth	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <init_software_timers+0x74>
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <init_software_timers+0x90>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	3b01      	subs	r3, #1
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <init_software_timers+0x90>)
 800074e:	801a      	strh	r2, [r3, #0]

	}

}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40001400 	.word	0x40001400
 8000760:	20000030 	.word	0x20000030
 8000764:	2000002a 	.word	0x2000002a
 8000768:	2000002c 	.word	0x2000002c
 800076c:	2000002e 	.word	0x2000002e

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6613      	str	r3, [r2, #96]	; 0x60
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6593      	str	r3, [r2, #88]	; 0x58
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f98c 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <TIM7_IRQHandler+0x10>)
 8000812:	f002 f861 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000034 	.word	0x20000034

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_TIM7_Init+0x64>)
 8000856:	4a15      	ldr	r2, [pc, #84]	; (80008ac <MX_TIM7_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000-1;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_TIM7_Init+0x64>)
 800085c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000860:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_TIM7_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_TIM7_Init+0x64>)
 800086a:	2209      	movs	r2, #9
 800086c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_TIM7_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM7_Init+0x64>)
 8000876:	f001 ff67 	bl	8002748 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000880:	f7ff ff26 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM7_Init+0x64>)
 8000892:	f002 fa03 	bl	8002c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800089c:	f7ff ff18 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000034 	.word	0x20000034
 80008ac:	40001400 	.word	0x40001400

080008b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_TIM_Base_MspInit+0x44>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d113      	bne.n	80008ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_TIM_Base_MspInit+0x48>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_TIM_Base_MspInit+0x48>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_TIM_Base_MspInit+0x48>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 0320 	and.w	r3, r3, #32
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	2037      	movs	r0, #55	; 0x37
 80008e0:	f000 fa19 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008e4:	2037      	movs	r0, #55	; 0x37
 80008e6:	f000 fa32 	bl	8000d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40001400 	.word	0x40001400
 80008f8:	40021000 	.word	0x40021000

080008fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART2_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x58>)
 8000940:	f002 fa52 	bl	8002de8 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f7ff fec1 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000080 	.word	0x20000080
 8000958:	40004400 	.word	0x40004400

0800095c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0ac      	sub	sp, #176	; 0xb0
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2288      	movs	r2, #136	; 0x88
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f002 ff0d 	bl	800379c <memset>
  if(uartHandle->Instance==USART2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a21      	ldr	r2, [pc, #132]	; (8000a0c <HAL_UART_MspInit+0xb0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d13b      	bne.n	8000a04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fa19 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a4:	f7ff fe94 	bl	80006d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b2:	6593      	str	r3, [r2, #88]	; 0x58
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_UART_MspInit+0xb4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d8:	230c      	movs	r3, #12
 80009da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f0:	2307      	movs	r3, #7
 80009f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 f9c0 	bl	8000d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a04:	bf00      	nop
 8000a06:	37b0      	adds	r7, #176	; 0xb0
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	40021000 	.word	0x40021000

08000a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a18:	f7ff ff02 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 fe87 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a46:	f7ff fda7 	bl	8000598 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	20000108 	.word	0x20000108

08000a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_2_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_Init+0x3c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_Init+0x3c>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 f93e 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 f80f 	bl	8000aa8 <HAL_InitTick>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	e001      	b.n	8000a9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a96:	f7ff fe6b 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d023      	beq.n	8000b04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_InitTick+0x70>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f949 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d10f      	bne.n	8000afe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d809      	bhi.n	8000af8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f913 	bl	8000d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0x74>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	e007      	b.n	8000b08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
 8000b02:	e001      	b.n	8000b08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000104 	.word	0x20000104

08000b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000104 	.word	0x20000104

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff3e 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff31 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa2 	bl	8000cbc <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e17f      	b.n	8001094 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8171 	beq.w	800108e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x40>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d118      	bne.n	8000e64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	6939      	ldr	r1, [r7, #16]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80ac 	beq.w	800108e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x242>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	; (80010bc <HAL_GPIO_Init+0x338>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x23e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <HAL_GPIO_Init+0x33c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x23a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	; (80010c4 <HAL_GPIO_Init+0x340>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x236>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_GPIO_Init+0x344>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x232>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	; (80010cc <HAL_GPIO_Init+0x348>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x22e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x34c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x22a>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x244>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fd8:	4937      	ldr	r1, [pc, #220]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100a:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001010:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800105e:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_GPIO_Init+0x350>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_GPIO_Init+0x350>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae78 	bne.w	8000d94 <HAL_GPIO_Init+0x10>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	48000800 	.word	0x48000800
 80010c4:	48000c00 	.word	0x48000c00
 80010c8:	48001000 	.word	0x48001000
 80010cc:	48001400 	.word	0x48001400
 80010d0:	48001800 	.word	0x48001800
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <HAL_PWREx_GetVoltageRange+0x18>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40007000 	.word	0x40007000

08001124 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001132:	d130      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001134:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001140:	d038      	beq.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001150:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2232      	movs	r2, #50	; 0x32
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9b      	lsrs	r3, r3, #18
 8001164:	3301      	adds	r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001168:	e002      	b.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117c:	d102      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x60>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f2      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001190:	d110      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e00f      	b.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d007      	beq.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40007000 	.word	0x40007000
 80011c8:	20000000 	.word	0x20000000
 80011cc:	431bde83 	.word	0x431bde83

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e3ca      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011e2:	4b97      	ldr	r3, [pc, #604]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ec:	4b94      	ldr	r3, [pc, #592]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80e4 	beq.w	80013cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_RCC_OscConfig+0x4a>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b0c      	cmp	r3, #12
 800120e:	f040 808b 	bne.w	8001328 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b01      	cmp	r3, #1
 8001216:	f040 8087 	bne.w	8001328 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x62>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e3a2      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a1a      	ldr	r2, [r3, #32]
 8001236:	4b82      	ldr	r3, [pc, #520]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <HAL_RCC_OscConfig+0x7c>
 8001242:	4b7f      	ldr	r3, [pc, #508]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800124a:	e005      	b.n	8001258 <HAL_RCC_OscConfig+0x88>
 800124c:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800124e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001252:	091b      	lsrs	r3, r3, #4
 8001254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001258:	4293      	cmp	r3, r2
 800125a:	d223      	bcs.n	80012a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fd55 	bl	8001d10 <RCC_SetFlashLatencyFromMSIRange>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e383      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a72      	ldr	r2, [pc, #456]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001276:	f043 0308 	orr.w	r3, r3, #8
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b70      	ldr	r3, [pc, #448]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	496d      	ldr	r1, [pc, #436]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128e:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	4968      	ldr	r1, [pc, #416]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
 80012a2:	e025      	b.n	80012f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4960      	ldr	r1, [pc, #384]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	495b      	ldr	r1, [pc, #364]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fd15 	bl	8001d10 <RCC_SetFlashLatencyFromMSIRange>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e343      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012f0:	f000 fc4a 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b52      	ldr	r3, [pc, #328]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	4950      	ldr	r1, [pc, #320]	; (8001444 <HAL_RCC_OscConfig+0x274>)
 8001302:	5ccb      	ldrb	r3, [r1, r3]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_RCC_OscConfig+0x278>)
 800130e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <HAL_RCC_OscConfig+0x27c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fbc7 	bl	8000aa8 <HAL_InitTick>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d052      	beq.n	80013ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e327      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d032      	beq.n	8001396 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001330:	4b43      	ldr	r3, [pc, #268]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a42      	ldr	r2, [pc, #264]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133c:	f7ff fc04 	bl	8000b48 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001344:	f7ff fc00 	bl	8000b48 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e310      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4931      	ldr	r1, [pc, #196]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	492c      	ldr	r1, [pc, #176]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e01a      	b.n	80013cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fbd1 	bl	8000b48 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013aa:	f7ff fbcd 	bl	8000b48 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e2dd      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x1da>
 80013c8:	e000      	b.n	80013cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d074      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x21a>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	d10e      	bne.n	8001402 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d10b      	bne.n	8001402 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d064      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d160      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e2ba      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x24a>
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e026      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001422:	d115      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 800142a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a02      	ldr	r2, [pc, #8]	; (8001440 <HAL_RCC_OscConfig+0x270>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x298>
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	080037c4 	.word	0x080037c4
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004
 8001450:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9f      	ldr	r2, [pc, #636]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a9c      	ldr	r2, [pc, #624]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fb6a 	bl	8000b48 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fb66 	bl	8000b48 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e276      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb56 	bl	8000b48 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb52 	bl	8000b48 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e262      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2d0>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d060      	beq.n	8001590 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_OscConfig+0x310>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d119      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d116      	bne.n	800150e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x328>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e23f      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	4973      	ldr	r1, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	e040      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d023      	beq.n	800155e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fb11 	bl	8000b48 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fb0d 	bl	8000b48 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e21d      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153c:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	495f      	ldr	r1, [pc, #380]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
 800155c:	e018      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5c      	ldr	r2, [pc, #368]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff faed 	bl	8000b48 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fae9 	bl	8000b48 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1f9      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a4:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fac8 	bl	8000b48 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fac4 	bl	8000b48 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1d4      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x3ec>
 80015dc:	e01b      	b.n	8001616 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff faab 	bl	8000b48 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f6:	f7ff faa7 	bl	8000b48 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1b7      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80a6 	beq.w	8001770 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800162a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6593      	str	r3, [r2, #88]	; 0x58
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164c:	2301      	movs	r3, #1
 800164e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d118      	bne.n	800168e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001668:	f7ff fa6e 	bl	8000b48 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff fa6a 	bl	8000b48 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e17a      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_RCC_OscConfig+0x508>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4d8>
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a6:	e029      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d115      	bne.n	80016dc <HAL_RCC_OscConfig+0x50c>
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x52c>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	4b9c      	ldr	r3, [pc, #624]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a9b      	ldr	r2, [pc, #620]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b98      	ldr	r3, [pc, #608]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a97      	ldr	r2, [pc, #604]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d016      	beq.n	8001732 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff fa20 	bl	8000b48 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff fa1c 	bl	8000b48 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e12a      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001722:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ed      	beq.n	800170c <HAL_RCC_OscConfig+0x53c>
 8001730:	e015      	b.n	800175e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fa09 	bl	8000b48 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fa05 	bl	8000b48 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e113      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001750:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001768:	4a79      	ldr	r2, [pc, #484]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80fe 	beq.w	8001976 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	2b02      	cmp	r3, #2
 8001780:	f040 80d0 	bne.w	8001924 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001784:	4b72      	ldr	r3, [pc, #456]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	429a      	cmp	r2, r3
 8001796:	d130      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	3b01      	subs	r3, #1
 80017a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d127      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d11f      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017c4:	2a07      	cmp	r2, #7
 80017c6:	bf14      	ite	ne
 80017c8:	2201      	movne	r2, #1
 80017ca:	2200      	moveq	r2, #0
 80017cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d113      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d06e      	beq.n	80018d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	d069      	beq.n	80018d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800180c:	4b50      	ldr	r3, [pc, #320]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0ad      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800181c:	4b4c      	ldr	r3, [pc, #304]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001826:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001828:	f7ff f98e 	bl	8000b48 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff f98a 	bl	8000b48 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e09a      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x784>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800185e:	3a01      	subs	r2, #1
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	4311      	orrs	r1, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001868:	0212      	lsls	r2, r2, #8
 800186a:	4311      	orrs	r1, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001870:	0852      	lsrs	r2, r2, #1
 8001872:	3a01      	subs	r2, #1
 8001874:	0552      	lsls	r2, r2, #21
 8001876:	4311      	orrs	r1, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800187c:	0852      	lsrs	r2, r2, #1
 800187e:	3a01      	subs	r2, #1
 8001880:	0652      	lsls	r2, r2, #25
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001888:	0912      	lsrs	r2, r2, #4
 800188a:	0452      	lsls	r2, r2, #17
 800188c:	430a      	orrs	r2, r1
 800188e:	4930      	ldr	r1, [pc, #192]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001890:	4313      	orrs	r3, r2
 8001892:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2d      	ldr	r2, [pc, #180]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ac:	f7ff f94c 	bl	8000b48 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff f948 	bl	8000b48 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e058      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d2:	e050      	b.n	8001976 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e04f      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d148      	bne.n	8001976 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018fc:	f7ff f924 	bl	8000b48 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f920 	bl	8000b48 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e030      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x734>
 8001922:	e028      	b.n	8001976 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d023      	beq.n	8001972 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_RCC_OscConfig+0x780>)
 8001930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001936:	f7ff f907 	bl	8000b48 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	e00c      	b.n	8001958 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f903 	bl	8000b48 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d905      	bls.n	8001958 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e013      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
 8001950:	40021000 	.word	0x40021000
 8001954:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_OscConfig+0x7b0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ec      	bne.n	800193e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_OscConfig+0x7b0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4905      	ldr	r1, [pc, #20]	; (8001980 <HAL_RCC_OscConfig+0x7b0>)
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RCC_OscConfig+0x7b4>)
 800196c:	4013      	ands	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e001      	b.n	8001976 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	feeefffc 	.word	0xfeeefffc

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0e7      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d910      	bls.n	80019cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0207 	bic.w	r2, r3, #7
 80019b2:	4970      	ldr	r1, [pc, #448]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cf      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d010      	beq.n	80019fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d908      	bls.n	80019fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4960      	ldr	r1, [pc, #384]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d04c      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d121      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0a6      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	4b54      	ldr	r3, [pc, #336]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d115      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e09a      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e08e      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e086      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4943      	ldr	r1, [pc, #268]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a70:	f7ff f86a 	bl	8000b48 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff f866 	bl	8000b48 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e06e      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d208      	bcs.n	8001ace <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	492b      	ldr	r1, [pc, #172]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d210      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 0207 	bic.w	r2, r3, #7
 8001ae4:	4923      	ldr	r1, [pc, #140]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_ClockConfig+0x1ec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e036      	b.n	8001b6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4918      	ldr	r1, [pc, #96]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4910      	ldr	r1, [pc, #64]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3c:	f000 f824 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	490b      	ldr	r1, [pc, #44]	; (8001b7c <HAL_RCC_ClockConfig+0x1f4>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1f8>)
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_ClockConfig+0x1fc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe ffa1 	bl	8000aa8 <HAL_InitTick>
 8001b66:	4603      	mov	r3, r0
 8001b68:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	080037c4 	.word	0x080037c4
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000004 	.word	0x20000004

08001b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba0:	4b3b      	ldr	r3, [pc, #236]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x34>
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d121      	bne.n	8001bfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d11e      	bne.n	8001bfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bbc:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bc8:	4b31      	ldr	r3, [pc, #196]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001be4:	4a2b      	ldr	r2, [pc, #172]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	e004      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d134      	bne.n	8001c80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d003      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0xac>
 8001c2c:	e005      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c30:	617b      	str	r3, [r7, #20]
      break;
 8001c32:	e005      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c36:	617b      	str	r3, [r7, #20]
      break;
 8001c38:	e002      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	617b      	str	r3, [r7, #20]
      break;
 8001c3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	fb03 f202 	mul.w	r2, r3, r2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	0e5b      	lsrs	r3, r3, #25
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	3301      	adds	r3, #1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c80:	69bb      	ldr	r3, [r7, #24]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40021000 	.word	0x40021000
 8001c94:	080037dc 	.word	0x080037dc
 8001c98:	00f42400 	.word	0x00f42400
 8001c9c:	007a1200 	.word	0x007a1200

08001ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080037d4 	.word	0x080037d4

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ce8:	f7ff ffda 	bl	8001ca0 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0adb      	lsrs	r3, r3, #11
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4904      	ldr	r1, [pc, #16]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	080037d4 	.word	0x080037d4

08001d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d18:	2300      	movs	r3, #0
 8001d1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d28:	f7ff f9ee 	bl	8001108 <HAL_PWREx_GetVoltageRange>
 8001d2c:	6178      	str	r0, [r7, #20]
 8001d2e:	e014      	b.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	4a24      	ldr	r2, [pc, #144]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff f9de 	bl	8001108 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d10b      	bne.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b80      	cmp	r3, #128	; 0x80
 8001d66:	d919      	bls.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d6c:	d902      	bls.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	e013      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d74:	2301      	movs	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e010      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d902      	bls.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d80:	2303      	movs	r3, #3
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	e00a      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d102      	bne.n	8001d92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	e004      	b.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b70      	cmp	r3, #112	; 0x70
 8001d96:	d101      	bne.n	8001d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 0207 	bic.w	r2, r3, #7
 8001da4:	4909      	ldr	r1, [pc, #36]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40022000 	.word	0x40022000

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d041      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001df0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001df4:	d02a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001df6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001dfa:	d824      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e00:	d008      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e06:	d81e      	bhi.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e10:	d010      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e12:	e018      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e14:	4b86      	ldr	r3, [pc, #536]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a85      	ldr	r2, [pc, #532]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e20:	e015      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fabb 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e32:	e00c      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3320      	adds	r3, #32
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fba6 	bl	800258c <RCCEx_PLLSAI2_Config>
 8001e40:	4603      	mov	r3, r0
 8001e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e44:	e003      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	74fb      	strb	r3, [r7, #19]
      break;
 8001e4a:	e000      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e62:	4973      	ldr	r1, [pc, #460]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e6a:	e001      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e6c:	7cfb      	ldrb	r3, [r7, #19]
 8001e6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d041      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e84:	d02a      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e8a:	d824      	bhi.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e90:	d008      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e96:	d81e      	bhi.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ea4:	4b62      	ldr	r3, [pc, #392]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a61      	ldr	r2, [pc, #388]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb0:	e015      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fa73 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec2:	e00c      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3320      	adds	r3, #32
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fb5e 	bl	800258c <RCCEx_PLLSAI2_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed4:	e003      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eda:	e000      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10b      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ee4:	4b52      	ldr	r3, [pc, #328]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef2:	494f      	ldr	r1, [pc, #316]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001efa:	e001      	b.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a0 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a40      	ldr	r2, [pc, #256]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fdfa 	bl	8000b48 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f56:	e009      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe fdf6 	bl	8000b48 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d902      	bls.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	74fb      	strb	r3, [r7, #19]
        break;
 8001f6a:	e005      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f6c:	4b31      	ldr	r3, [pc, #196]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d15c      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01f      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d019      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fc8:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fdb5 	bl	8000b48 <HAL_GetTick>
 8001fde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe fdb1 	bl	8000b48 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ff8:	e006      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ec      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201e:	4904      	ldr	r1, [pc, #16]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
 800202c:	e006      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203c:	7c7b      	ldrb	r3, [r7, #17]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a9d      	ldr	r2, [pc, #628]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205a:	4b98      	ldr	r3, [pc, #608]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 0203 	bic.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	4994      	ldr	r1, [pc, #592]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 020c 	bic.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	498c      	ldr	r1, [pc, #560]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800209e:	4b87      	ldr	r3, [pc, #540]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4983      	ldr	r1, [pc, #524]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020c0:	4b7e      	ldr	r3, [pc, #504]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	497b      	ldr	r1, [pc, #492]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020e2:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f0:	4972      	ldr	r1, [pc, #456]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002104:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	496a      	ldr	r1, [pc, #424]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	4961      	ldr	r1, [pc, #388]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	4959      	ldr	r1, [pc, #356]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002178:	4950      	ldr	r1, [pc, #320]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	4948      	ldr	r1, [pc, #288]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	493f      	ldr	r1, [pc, #252]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d028      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021de:	4937      	ldr	r1, [pc, #220]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ee:	d106      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e011      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002202:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002206:	d10c      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3304      	adds	r3, #4
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f8c8 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800221e:	7cfb      	ldrb	r3, [r7, #19]
 8002220:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d028      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223c:	491f      	ldr	r1, [pc, #124]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224c:	d106      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a1a      	ldr	r2, [pc, #104]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002258:	60d3      	str	r3, [r2, #12]
 800225a:	e011      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002264:	d10c      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	2101      	movs	r1, #1
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f899 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 8002272:	4603      	mov	r3, r0
 8002274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02b      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022aa:	d109      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a02      	ldr	r2, [pc, #8]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
 80022b8:	e014      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f867 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d02f      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022fe:	4928      	ldr	r1, [pc, #160]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800230e:	d10d      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f844 	bl	80023a4 <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d014      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
 800232a:	e011      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002334:	d10c      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3320      	adds	r3, #32
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f925 	bl	800258c <RCCEx_PLLSAI2_Config>
 8002342:	4603      	mov	r3, r0
 8002344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800234c:	7cfb      	ldrb	r3, [r7, #19]
 800234e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800238e:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002396:	7cbb      	ldrb	r3, [r7, #18]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b2:	4b75      	ldr	r3, [pc, #468]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d018      	beq.n	80023f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d10d      	bne.n	80023ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
       ||
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023d6:	4b6c      	ldr	r3, [pc, #432]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
       ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d047      	beq.n	800247a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e044      	b.n	800247a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d018      	beq.n	800242a <RCCEx_PLLSAI1_Config+0x86>
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d825      	bhi.n	8002448 <RCCEx_PLLSAI1_Config+0xa4>
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d002      	beq.n	8002406 <RCCEx_PLLSAI1_Config+0x62>
 8002400:	2b02      	cmp	r3, #2
 8002402:	d009      	beq.n	8002418 <RCCEx_PLLSAI1_Config+0x74>
 8002404:	e020      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11d      	bne.n	800244e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002416:	e01a      	b.n	800244e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002418:	4b5b      	ldr	r3, [pc, #364]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d116      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002428:	e013      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800242a:	4b57      	ldr	r3, [pc, #348]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002446:	e006      	b.n	8002456 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      break;
 800244c:	e004      	b.n	8002458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800244e:	bf00      	nop
 8002450:	e002      	b.n	8002458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002452:	bf00      	nop
 8002454:	e000      	b.n	8002458 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002456:	bf00      	nop
    }

    if(status == HAL_OK)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800245e:	4b4a      	ldr	r3, [pc, #296]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	430b      	orrs	r3, r1
 8002474:	4944      	ldr	r1, [pc, #272]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d17d      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800248a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe fb5c 	bl	8000b48 <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002492:	e009      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002494:	f7fe fb58 	bl	8000b48 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	73fb      	strb	r3, [r7, #15]
        break;
 80024a6:	e005      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ef      	bne.n	8002494 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d160      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d111      	bne.n	80024e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6892      	ldr	r2, [r2, #8]
 80024d0:	0211      	lsls	r1, r2, #8
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	0912      	lsrs	r2, r2, #4
 80024d8:	0452      	lsls	r2, r2, #17
 80024da:	430a      	orrs	r2, r1
 80024dc:	492a      	ldr	r1, [pc, #168]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	610b      	str	r3, [r1, #16]
 80024e2:	e027      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d112      	bne.n	8002510 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ea:	4b27      	ldr	r3, [pc, #156]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	0211      	lsls	r1, r2, #8
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6912      	ldr	r2, [r2, #16]
 8002500:	0852      	lsrs	r2, r2, #1
 8002502:	3a01      	subs	r2, #1
 8002504:	0552      	lsls	r2, r2, #21
 8002506:	430a      	orrs	r2, r1
 8002508:	491f      	ldr	r1, [pc, #124]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	610b      	str	r3, [r1, #16]
 800250e:	e011      	b.n	8002534 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002518:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6892      	ldr	r2, [r2, #8]
 8002520:	0211      	lsls	r1, r2, #8
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6952      	ldr	r2, [r2, #20]
 8002526:	0852      	lsrs	r2, r2, #1
 8002528:	3a01      	subs	r2, #1
 800252a:	0652      	lsls	r2, r2, #25
 800252c:	430a      	orrs	r2, r1
 800252e:	4916      	ldr	r1, [pc, #88]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002530:	4313      	orrs	r3, r2
 8002532:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800253e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fb02 	bl	8000b48 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002546:	e009      	b.n	800255c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002548:	f7fe fafe 	bl	8000b48 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d902      	bls.n	800255c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	73fb      	strb	r3, [r7, #15]
          break;
 800255a:	e005      	b.n	8002568 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ef      	beq.n	8002548 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4904      	ldr	r1, [pc, #16]	; (8002588 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000

0800258c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d018      	beq.n	80025d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0203 	and.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d10d      	bne.n	80025d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025be:	4b61      	ldr	r3, [pc, #388]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
       ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d047      	beq.n	8002662 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e044      	b.n	8002662 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d018      	beq.n	8002612 <RCCEx_PLLSAI2_Config+0x86>
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d825      	bhi.n	8002630 <RCCEx_PLLSAI2_Config+0xa4>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d002      	beq.n	80025ee <RCCEx_PLLSAI2_Config+0x62>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d009      	beq.n	8002600 <RCCEx_PLLSAI2_Config+0x74>
 80025ec:	e020      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ee:	4b55      	ldr	r3, [pc, #340]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d11d      	bne.n	8002636 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fe:	e01a      	b.n	8002636 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d116      	bne.n	800263a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002610:	e013      	b.n	800263a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002612:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800261e:	4b49      	ldr	r3, [pc, #292]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800262e:	e006      	b.n	800263e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e004      	b.n	8002640 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800263e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6819      	ldr	r1, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	430b      	orrs	r3, r1
 800265c:	4939      	ldr	r1, [pc, #228]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d167      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a35      	ldr	r2, [pc, #212]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fa68 	bl	8000b48 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800267a:	e009      	b.n	8002690 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800267c:	f7fe fa64 	bl	8000b48 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d902      	bls.n	8002690 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	73fb      	strb	r3, [r7, #15]
        break;
 800268e:	e005      	b.n	800269c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002690:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ef      	bne.n	800267c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d14a      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026a8:	4b26      	ldr	r3, [pc, #152]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6892      	ldr	r2, [r2, #8]
 80026b8:	0211      	lsls	r1, r2, #8
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	0912      	lsrs	r2, r2, #4
 80026c0:	0452      	lsls	r2, r2, #17
 80026c2:	430a      	orrs	r2, r1
 80026c4:	491f      	ldr	r1, [pc, #124]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	614b      	str	r3, [r1, #20]
 80026ca:	e011      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6912      	ldr	r2, [r2, #16]
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0652      	lsls	r2, r2, #25
 80026e8:	430a      	orrs	r2, r1
 80026ea:	4916      	ldr	r1, [pc, #88]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a13      	ldr	r2, [pc, #76]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fa24 	bl	8000b48 <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002702:	e009      	b.n	8002718 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002704:	f7fe fa20 	bl	8000b48 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	73fb      	strb	r3, [r7, #15]
          break;
 8002716:	e005      	b.n	8002724 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	4904      	ldr	r1, [pc, #16]	; (8002744 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002738:	7bfb      	ldrb	r3, [r7, #15]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e049      	b.n	80027ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe f89e 	bl	80008b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 f9ee 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d001      	beq.n	8002810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e04f      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_TIM_Base_Start_IT+0xc4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01d      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d018      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d013      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_TIM_Base_Start_IT+0xd4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_TIM_Base_Start_IT+0x76>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d115      	bne.n	800289a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b06      	cmp	r3, #6
 800287e:	d015      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0xb4>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d011      	beq.n	80028ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	e008      	b.n	80028ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	e000      	b.n	80028ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40000800 	.word	0x40000800
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	40013400 	.word	0x40013400
 80028d0:	40014000 	.word	0x40014000
 80028d4:	00010007 	.word	0x00010007

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f905 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8f7 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f908 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f8db 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8cd 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8de 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f8b1 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8a3 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f8b4 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f887 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f879 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f88a 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd fe2f 	bl	80006ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b80      	cmp	r3, #128	; 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f99c 	bl	8002dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f98f 	bl	8002dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f838 	bl	8002b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0220 	mvn.w	r2, #32
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f94f 	bl	8002dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d00f      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d01b      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d017      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00f      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <TIM_Base_SetConfig+0x128>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <TIM_Base_SetConfig+0x130>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00f      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00b      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <TIM_Base_SetConfig+0x128>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <TIM_Base_SetConfig+0x130>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40013400 	.word	0x40013400
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800

08002c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e068      	b.n	8002d86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d018      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10c      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40013400 	.word	0x40013400
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40014000 	.word	0x40014000

08002dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e040      	b.n	8002e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fda6 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f82c 	bl	8002e84 <UART_SetConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fad8 	bl	80033f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fb5f 	bl	8003538 <UART_CheckIdleState>
 8002e7a:	4603      	mov	r3, r0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4ba4      	ldr	r3, [pc, #656]	; (8003144 <UART_SetConfig+0x2c0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a99      	ldr	r2, [pc, #612]	; (8003148 <UART_SetConfig+0x2c4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	4313      	orrs	r3, r2
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a90      	ldr	r2, [pc, #576]	; (800314c <UART_SetConfig+0x2c8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d126      	bne.n	8002f5c <UART_SetConfig+0xd8>
 8002f0e:	4b90      	ldr	r3, [pc, #576]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d81b      	bhi.n	8002f54 <UART_SetConfig+0xd0>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0xa0>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e116      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e112      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f44:	2304      	movs	r3, #4
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e10e      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e10a      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f54:	2310      	movs	r3, #16
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e106      	b.n	800316a <UART_SetConfig+0x2e6>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a7c      	ldr	r2, [pc, #496]	; (8003154 <UART_SetConfig+0x2d0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d138      	bne.n	8002fd8 <UART_SetConfig+0x154>
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <UART_SetConfig+0x2cc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b0c      	cmp	r3, #12
 8002f72:	d82d      	bhi.n	8002fd0 <UART_SetConfig+0x14c>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0xf8>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fb1 	.word	0x08002fb1
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	08002fd1 	.word	0x08002fd1
 8002f88:	08002fd1 	.word	0x08002fd1
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	08002fd1 	.word	0x08002fd1
 8002f94:	08002fd1 	.word	0x08002fd1
 8002f98:	08002fd1 	.word	0x08002fd1
 8002f9c:	08002fb9 	.word	0x08002fb9
 8002fa0:	08002fd1 	.word	0x08002fd1
 8002fa4:	08002fd1 	.word	0x08002fd1
 8002fa8:	08002fd1 	.word	0x08002fd1
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e0d8      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e0d4      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e0d0      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e0cc      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e0c8      	b.n	800316a <UART_SetConfig+0x2e6>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <UART_SetConfig+0x2d4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d125      	bne.n	800302e <UART_SetConfig+0x1aa>
 8002fe2:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <UART_SetConfig+0x2cc>)
 8002fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fec:	2b30      	cmp	r3, #48	; 0x30
 8002fee:	d016      	beq.n	800301e <UART_SetConfig+0x19a>
 8002ff0:	2b30      	cmp	r3, #48	; 0x30
 8002ff2:	d818      	bhi.n	8003026 <UART_SetConfig+0x1a2>
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d00a      	beq.n	800300e <UART_SetConfig+0x18a>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d814      	bhi.n	8003026 <UART_SetConfig+0x1a2>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <UART_SetConfig+0x182>
 8003000:	2b10      	cmp	r3, #16
 8003002:	d008      	beq.n	8003016 <UART_SetConfig+0x192>
 8003004:	e00f      	b.n	8003026 <UART_SetConfig+0x1a2>
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300c:	e0ad      	b.n	800316a <UART_SetConfig+0x2e6>
 800300e:	2302      	movs	r3, #2
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003014:	e0a9      	b.n	800316a <UART_SetConfig+0x2e6>
 8003016:	2304      	movs	r3, #4
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301c:	e0a5      	b.n	800316a <UART_SetConfig+0x2e6>
 800301e:	2308      	movs	r3, #8
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003024:	e0a1      	b.n	800316a <UART_SetConfig+0x2e6>
 8003026:	2310      	movs	r3, #16
 8003028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302c:	e09d      	b.n	800316a <UART_SetConfig+0x2e6>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4a      	ldr	r2, [pc, #296]	; (800315c <UART_SetConfig+0x2d8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d125      	bne.n	8003084 <UART_SetConfig+0x200>
 8003038:	4b45      	ldr	r3, [pc, #276]	; (8003150 <UART_SetConfig+0x2cc>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003042:	2bc0      	cmp	r3, #192	; 0xc0
 8003044:	d016      	beq.n	8003074 <UART_SetConfig+0x1f0>
 8003046:	2bc0      	cmp	r3, #192	; 0xc0
 8003048:	d818      	bhi.n	800307c <UART_SetConfig+0x1f8>
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d00a      	beq.n	8003064 <UART_SetConfig+0x1e0>
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d814      	bhi.n	800307c <UART_SetConfig+0x1f8>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <UART_SetConfig+0x1d8>
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d008      	beq.n	800306c <UART_SetConfig+0x1e8>
 800305a:	e00f      	b.n	800307c <UART_SetConfig+0x1f8>
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e082      	b.n	800316a <UART_SetConfig+0x2e6>
 8003064:	2302      	movs	r3, #2
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e07e      	b.n	800316a <UART_SetConfig+0x2e6>
 800306c:	2304      	movs	r3, #4
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e07a      	b.n	800316a <UART_SetConfig+0x2e6>
 8003074:	2308      	movs	r3, #8
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e076      	b.n	800316a <UART_SetConfig+0x2e6>
 800307c:	2310      	movs	r3, #16
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e072      	b.n	800316a <UART_SetConfig+0x2e6>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a35      	ldr	r2, [pc, #212]	; (8003160 <UART_SetConfig+0x2dc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d12a      	bne.n	80030e4 <UART_SetConfig+0x260>
 800308e:	4b30      	ldr	r3, [pc, #192]	; (8003150 <UART_SetConfig+0x2cc>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309c:	d01a      	beq.n	80030d4 <UART_SetConfig+0x250>
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d81b      	bhi.n	80030dc <UART_SetConfig+0x258>
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a8:	d00c      	beq.n	80030c4 <UART_SetConfig+0x240>
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ae:	d815      	bhi.n	80030dc <UART_SetConfig+0x258>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <UART_SetConfig+0x238>
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b8:	d008      	beq.n	80030cc <UART_SetConfig+0x248>
 80030ba:	e00f      	b.n	80030dc <UART_SetConfig+0x258>
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e052      	b.n	800316a <UART_SetConfig+0x2e6>
 80030c4:	2302      	movs	r3, #2
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e04e      	b.n	800316a <UART_SetConfig+0x2e6>
 80030cc:	2304      	movs	r3, #4
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e04a      	b.n	800316a <UART_SetConfig+0x2e6>
 80030d4:	2308      	movs	r3, #8
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e046      	b.n	800316a <UART_SetConfig+0x2e6>
 80030dc:	2310      	movs	r3, #16
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e042      	b.n	800316a <UART_SetConfig+0x2e6>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <UART_SetConfig+0x2c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d13a      	bne.n	8003164 <UART_SetConfig+0x2e0>
 80030ee:	4b18      	ldr	r3, [pc, #96]	; (8003150 <UART_SetConfig+0x2cc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030fc:	d01a      	beq.n	8003134 <UART_SetConfig+0x2b0>
 80030fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003102:	d81b      	bhi.n	800313c <UART_SetConfig+0x2b8>
 8003104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003108:	d00c      	beq.n	8003124 <UART_SetConfig+0x2a0>
 800310a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310e:	d815      	bhi.n	800313c <UART_SetConfig+0x2b8>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <UART_SetConfig+0x298>
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003118:	d008      	beq.n	800312c <UART_SetConfig+0x2a8>
 800311a:	e00f      	b.n	800313c <UART_SetConfig+0x2b8>
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e022      	b.n	800316a <UART_SetConfig+0x2e6>
 8003124:	2302      	movs	r3, #2
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e01e      	b.n	800316a <UART_SetConfig+0x2e6>
 800312c:	2304      	movs	r3, #4
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e01a      	b.n	800316a <UART_SetConfig+0x2e6>
 8003134:	2308      	movs	r3, #8
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e016      	b.n	800316a <UART_SetConfig+0x2e6>
 800313c:	2310      	movs	r3, #16
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e012      	b.n	800316a <UART_SetConfig+0x2e6>
 8003144:	efff69f3 	.word	0xefff69f3
 8003148:	40008000 	.word	0x40008000
 800314c:	40013800 	.word	0x40013800
 8003150:	40021000 	.word	0x40021000
 8003154:	40004400 	.word	0x40004400
 8003158:	40004800 	.word	0x40004800
 800315c:	40004c00 	.word	0x40004c00
 8003160:	40005000 	.word	0x40005000
 8003164:	2310      	movs	r3, #16
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a9f      	ldr	r2, [pc, #636]	; (80033ec <UART_SetConfig+0x568>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d17a      	bne.n	800326a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003178:	2b08      	cmp	r3, #8
 800317a:	d824      	bhi.n	80031c6 <UART_SetConfig+0x342>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x300>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031c7 	.word	0x080031c7
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031c7 	.word	0x080031c7
 8003194:	080031b7 	.word	0x080031b7
 8003198:	080031c7 	.word	0x080031c7
 800319c:	080031c7 	.word	0x080031c7
 80031a0:	080031c7 	.word	0x080031c7
 80031a4:	080031bf 	.word	0x080031bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe fd86 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80031ac:	61f8      	str	r0, [r7, #28]
        break;
 80031ae:	e010      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b0:	4b8f      	ldr	r3, [pc, #572]	; (80033f0 <UART_SetConfig+0x56c>)
 80031b2:	61fb      	str	r3, [r7, #28]
        break;
 80031b4:	e00d      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b6:	f7fe fce7 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 80031ba:	61f8      	str	r0, [r7, #28]
        break;
 80031bc:	e009      	b.n	80031d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	61fb      	str	r3, [r7, #28]
        break;
 80031c4:	e005      	b.n	80031d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80fb 	beq.w	80033d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d305      	bcc.n	80031f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d903      	bls.n	80031fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031fc:	e0e8      	b.n	80033d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	2200      	movs	r2, #0
 8003202:	461c      	mov	r4, r3
 8003204:	4615      	mov	r5, r2
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	022b      	lsls	r3, r5, #8
 8003210:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003214:	0222      	lsls	r2, r4, #8
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6849      	ldr	r1, [r1, #4]
 800321a:	0849      	lsrs	r1, r1, #1
 800321c:	2000      	movs	r0, #0
 800321e:	4688      	mov	r8, r1
 8003220:	4681      	mov	r9, r0
 8003222:	eb12 0a08 	adds.w	sl, r2, r8
 8003226:	eb43 0b09 	adc.w	fp, r3, r9
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003238:	4650      	mov	r0, sl
 800323a:	4659      	mov	r1, fp
 800323c:	f7fc ffc4 	bl	80001c8 <__aeabi_uldivmod>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4613      	mov	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800324e:	d308      	bcc.n	8003262 <UART_SetConfig+0x3de>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d204      	bcs.n	8003262 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	e0b6      	b.n	80033d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003268:	e0b2      	b.n	80033d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003272:	d15e      	bne.n	8003332 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003278:	2b08      	cmp	r3, #8
 800327a:	d828      	bhi.n	80032ce <UART_SetConfig+0x44a>
 800327c:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <UART_SetConfig+0x400>)
 800327e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003282:	bf00      	nop
 8003284:	080032a9 	.word	0x080032a9
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032b9 	.word	0x080032b9
 8003290:	080032cf 	.word	0x080032cf
 8003294:	080032bf 	.word	0x080032bf
 8003298:	080032cf 	.word	0x080032cf
 800329c:	080032cf 	.word	0x080032cf
 80032a0:	080032cf 	.word	0x080032cf
 80032a4:	080032c7 	.word	0x080032c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a8:	f7fe fd06 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 80032ac:	61f8      	str	r0, [r7, #28]
        break;
 80032ae:	e014      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b0:	f7fe fd18 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 80032b4:	61f8      	str	r0, [r7, #28]
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <UART_SetConfig+0x56c>)
 80032ba:	61fb      	str	r3, [r7, #28]
        break;
 80032bc:	e00d      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7fe fc63 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 80032c2:	61f8      	str	r0, [r7, #28]
        break;
 80032c4:	e009      	b.n	80032da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	61fb      	str	r3, [r7, #28]
        break;
 80032cc:	e005      	b.n	80032da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d077      	beq.n	80033d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005a      	lsls	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	441a      	add	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b0f      	cmp	r3, #15
 80032fa:	d916      	bls.n	800332a <UART_SetConfig+0x4a6>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d212      	bcs.n	800332a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	b29b      	uxth	r3, r3
 8003308:	f023 030f 	bic.w	r3, r3, #15
 800330c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	b29a      	uxth	r2, r3
 800331a:	8afb      	ldrh	r3, [r7, #22]
 800331c:	4313      	orrs	r3, r2
 800331e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	8afa      	ldrh	r2, [r7, #22]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e052      	b.n	80033d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003330:	e04e      	b.n	80033d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003336:	2b08      	cmp	r3, #8
 8003338:	d827      	bhi.n	800338a <UART_SetConfig+0x506>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x4bc>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fca8 	bl	8001cb8 <HAL_RCC_GetPCLK1Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e014      	b.n	8003396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fcba 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <UART_SetConfig+0x56c>)
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e00d      	b.n	8003396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fc05 	bl	8001b88 <HAL_RCC_GetSysClockFreq>
 800337e:	61f8      	str	r0, [r7, #28]
        break;
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003394:	bf00      	nop
    }

    if (pclk != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d019      	beq.n	80033d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	085a      	lsrs	r2, r3, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d909      	bls.n	80033ca <UART_SetConfig+0x546>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d205      	bcs.n	80033ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60da      	str	r2, [r3, #12]
 80033c8:	e002      	b.n	80033d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40008000 	.word	0x40008000
 80033f0:	00f42400 	.word	0x00f42400

080033f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01a      	beq.n	800350a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f2:	d10a      	bne.n	800350a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003548:	f7fd fafe 	bl	8000b48 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d10e      	bne.n	800357a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f82d 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e023      	b.n	80035c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d10e      	bne.n	80035a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f817 	bl	80035ca <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e00d      	b.n	80035c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b09c      	sub	sp, #112	; 0x70
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4613      	mov	r3, r2
 80035d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	e0a5      	b.n	8003728 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	f000 80a1 	beq.w	8003728 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fd faaf 	bl	8000b48 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <UART_WaitOnFlagUntilTimeout+0x32>
 80035f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d13e      	bne.n	800367a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800360a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800360c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003610:	667b      	str	r3, [r7, #100]	; 0x64
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800361c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e6      	bne.n	80035fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3308      	adds	r3, #8
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800363e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3308      	adds	r3, #8
 800364c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800364e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800365c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e5      	bne.n	800362e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e067      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d04f      	beq.n	8003728 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003696:	d147      	bne.n	8003728 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e6      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	613b      	str	r3, [r7, #16]
   return(result);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036f4:	623a      	str	r2, [r7, #32]
 80036f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	6a3a      	ldr	r2, [r7, #32]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	61bb      	str	r3, [r7, #24]
   return(result);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e010      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	429a      	cmp	r2, r3
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	429a      	cmp	r2, r3
 8003744:	f43f af4a 	beq.w	80035dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3770      	adds	r7, #112	; 0x70
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	; (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	; (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	; (8003798 <__libc_init_array+0x44>)
 8003768:	f000 f820 	bl	80037ac <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	08003814 	.word	0x08003814
 8003790:	08003814 	.word	0x08003814
 8003794:	08003814 	.word	0x08003814
 8003798:	08003818 	.word	0x08003818

0800379c <memset>:
 800379c:	4402      	add	r2, r0
 800379e:	4603      	mov	r3, r0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d100      	bne.n	80037a6 <memset+0xa>
 80037a4:	4770      	bx	lr
 80037a6:	f803 1b01 	strb.w	r1, [r3], #1
 80037aa:	e7f9      	b.n	80037a0 <memset+0x4>

080037ac <_init>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr

080037b8 <_fini>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr
